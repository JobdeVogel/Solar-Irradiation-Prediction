Total duration: 33.2204s
File: c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py
File duration: 31.529s (94.91%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
     2|         0|            0|            0|  0.00%|import Rhino
     3|         0|            0|            0|  0.00%|import System
     4|         0|            0|            0|  0.00%|import time
     5|         0|            0|            0|  0.00%|import warnings
     6|         0|            0|            0|  0.00%|import sys
     7|         0|            0|            0|  0.00%|import rhino3dm
     8|         0|            0|            0|  0.00%|import pprofile
     9|         0|            0|            0|  0.00%|import math
    10|         0|            0|            0|  0.00%|import numpy as np
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|'''
    13|         0|            0|            0|  0.00%|Exception line 245 at index 11
    14|         0|            0|            0|  0.00%|'''
    15|         0|            0|            0|  0.00%|
    16|         2|            0|            0|  0.00%|def join_meshes(meshes):
    17|         2|            0|            0|  0.00%|    joined_meshes = rg.Mesh()
    18|        93|            0|            0|  0.00%|    for mesh in meshes:
    19|        91|    0.0227742|  0.000250266|  0.07%|        joined_meshes.Append(mesh)
(call)|       182|   0.00398898|  2.19175e-05|  0.01%|# <string>:4 __init__
    20|         0|            0|            0|  0.00%|
    21|         2|            0|            0|  0.00%|    return joined_meshes
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|#8.94%
    24|     11173|    0.0306482|  2.74306e-06|  0.09%|def get_face_vertices(face, mesh):
    25|         0|            0|            0|  0.00%|    # vertex_0 = rg.Point3d(mesh.Vertices[face.A].X, mesh.Vertices[face.A].Y, mesh.Vertices[face.A].Z)
    26|         0|            0|            0|  0.00%|    # vertex_1 = rg.Point3d(mesh.Vertices[face.B].X, mesh.Vertices[face.B].Y, mesh.Vertices[face.B].Z)
    27|         0|            0|            0|  0.00%|    # vertex_2 = rg.Point3d(mesh.Vertices[face.C].X, mesh.Vertices[face.C].Y, mesh.Vertices[face.C].Z)
    28|         0|            0|            0|  0.00%|    # vertex_3 = rg.Point3d(mesh.Vertices[face.D].X, mesh.Vertices[face.D].Y, mesh.Vertices[face.D].Z)
    29|         0|            0|            0|  0.00%|
    30|     78211|      3.41959|  4.37226e-05| 10.29%|    vertices = [rg.Point3d(mesh.Vertices[vertex].X, mesh.Vertices[vertex].Y, mesh.Vertices[vertex].Z)
    31|     11173|     0.158478|   1.4184e-05|  0.48%|                for vertex in (face.A, face.B, face.C, face.D)]
(call)|     11173|      3.37529|  0.000302094| 10.16%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:30 <listcomp>
    32|         0|            0|            0|  0.00%|
    33|     11173|    0.0696115|  6.23034e-06|  0.21%|    if face.IsQuad:
    34|      7628|    0.0244794|  3.20915e-06|  0.07%|        return vertices[:4]
    35|         0|            0|            0|  0.00%|    else:
    36|      3545|    0.0120139|  3.38897e-06|  0.04%|        return vertices[:3]
    37|         0|            0|            0|  0.00%|
    38|         1|            0|            0|  0.00%|def delete_invalid_sensors(mesh, sensors, normals, minimum_angle = 0.017, minimum_area=0.0001):
    39|     11174|     0.160119|  1.43296e-05|  0.48%|    for i, (face, normal) in enumerate(zip(mesh.Faces, mesh.FaceNormals)):
    40|     11173|     0.125093|   1.1196e-05|  0.38%|        vertices = get_face_vertices(face, mesh)
(call)|     11173|      3.71482|  0.000332482| 11.18%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:24 get_face_vertices
    41|         0|            0|            0|  0.00%|
    42|     11173|    0.0606582|    5.429e-06|  0.18%|        if face.IsTriangle:
    43|      3545|    0.0783241|  2.20942e-05|  0.24%|            triangle = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    44|      3545|    0.0498714|  1.40681e-05|  0.15%|            min_angle = min([triangle.AngleA, triangle.AngleB, triangle.AngleC])
    45|         0|            0|            0|  0.00%|
    46|      3545|    0.0148084|  4.17727e-06|  0.04%|            if min_angle < minimum_angle:
    47|      1035|    0.0020566|  1.98705e-06|  0.01%|                sensors[i] = None
    48|      1035|   0.00199389|  1.92647e-06|  0.01%|                normals[i] = None
    49|      2510|   0.00802875|   3.1987e-06|  0.02%|            elif triangle.Area < minimum_area:
    50|       178|            0|            0|  0.00%|                sensors[i] = None
    51|       178|   0.00099659|  5.59882e-06|  0.00%|                normals[i] = None
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|#        elif face.IsQuad:
    54|         0|            0|            0|  0.00%|#            rectangle = rg.Rectangle3d(rg.Plane.WorldXY, vertices[0], vertices[2])
    55|         0|            0|            0|  0.00%|#
    56|         0|            0|            0|  0.00%|#            triangle_1 = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    57|         0|            0|            0|  0.00%|#            triangle_2 = rg.Triangle3d(vertices[2], vertices[3], vertices[0])
    58|         0|            0|            0|  0.00%|#
    59|         0|            0|            0|  0.00%|#            min_angle = min([triangle_1.AngleA, triangle_1.AngleB, triangle_1.AngleC, triangle_2.AngleA, triangle_2.AngleB, triangle_2.AngleC])
    60|         0|            0|            0|  0.00%|#
    61|         0|            0|            0|  0.00%|#            if min_angle < minimum_angle:
    62|         0|            0|            0|  0.00%|#                sensors[i] = None
    63|         0|            0|            0|  0.00%|#                normals[i] = None
    64|         0|            0|            0|  0.00%|#            elif triangle_1.Area < minimum_area or triangle_2.Area < minimum_area:
    65|         0|            0|            0|  0.00%|#                sensors[i] = None
    66|         0|            0|            0|  0.00%|#                normals[i] = None
    67|         0|            0|            0|  0.00%|
    68|         1|            0|            0|  0.00%|    return sensors, normals
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|# def compute_centroids(mesh, offset):
    71|         0|            0|            0|  0.00%|#     vectors = [rg.Vector3f.Multiply(mesh.FaceNormals[i], offset) for i in xrange(mesh.Faces.Count)]
    72|         0|            0|            0|  0.00%|#     centroids = [mesh.Faces.GetFaceCenter(i) for i in xrange(mesh.Faces.Count)]
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|#     for centroid, vec in zip(centroids, vectors):
    75|         0|            0|            0|  0.00%|#         centroid.Transform(rg.Transform.Translation(vec))
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|#     return centroids, vectors
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|# Make faster with Numpy, using arrays of vectors
    80|         0|            0|            0|  0.00%|def perpendicular_wall_vectors(vector):
    81|         0|            0|            0|  0.00%|    z_vector = rg.Vector3f(0,0,1)
    82|         0|            0|            0|  0.00%|    vec1 = rg.Vector3f.CrossProduct(vector, z_vector)
    83|         0|            0|            0|  0.00%|    vec2 = -vec1
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    return (vec1, vec2)
    86|         0|            0|            0|  0.00%|
    87|        47|            0|            0|  0.00%|def _to_numpy(points, vectors, offset):
    88|     31779|     0.198421|  6.24378e-06|  0.60%|    np_points = np.array([[point.X, point.Y, point.Z] for point in points])
(call)|        47|     0.168267|   0.00358014|  0.51%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:88 <listcomp>
    89|     31779|     0.286823|  9.02555e-06|  0.86%|    np_vectors = np.array([[vector.X, vector.Y, vector.Z] for vector in vectors]) * offset
(call)|        47|     0.253664|    0.0053971|  0.76%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:89 <listcomp>
    90|         0|            0|            0|  0.00%|
    91|        47|  0.000997066|  2.12142e-05|  0.00%|    new_points = np_points + np_vectors
    92|     31779|     0.910281|  2.86441e-05|  2.74%|    rg_points = [rg.Point3d(*point) for point in new_points]
(call)|        47|     0.910281|    0.0193677|  2.74%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:92 <listcomp>
    93|         0|            0|            0|  0.00%|
    94|        47|            0|            0|  0.00%|    return rg_points
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|#11.99%
    97|        47|            0|            0|  0.00%|def offset_points(points, vectors, offset):
    98|         0|            0|            0|  0.00%|    # offset_vectors = [rg.Vector3f.Multiply(vec, offset) for vec in vectors]
    99|         0|            0|            0|  0.00%|    # points = [point + offset_vec for point, offset_vec in zip(points, offset_vectors)]
   100|         0|            0|            0|  0.00%|
   101|        47|   0.00252986|  5.38268e-05|  0.01%|    points = _to_numpy(points, vectors, offset)
(call)|        47|      1.39652|    0.0297132|  4.20%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:87 _to_numpy
   102|         0|            0|            0|  0.00%|
   103|        47|            0|            0|  0.00%|    return points
   104|         0|            0|            0|  0.00%|
   105|     19136|    0.0681305|  3.56033e-06|  0.21%|def is_above_mesh(point, meshes, ray_vector=rg.Vector3d(0,0,-1)):
   106|     19136|    0.0427997|  2.23661e-06|  0.13%|    intersects = False
   107|     19136|      1.06401|  5.56026e-05|  3.20%|    ray = rg.Ray3d(point, ray_vector)
(call)|     38272|     0.575712|  1.50426e-05|  1.73%|# <string>:4 __init__
   108|         0|            0|            0|  0.00%|
   109|     30218|     0.126608|  4.18983e-06|  0.38%|    for mesh in meshes:
   110|         0|            0|            0|  0.00%|        #11.28%
   111|     19136|     0.557956|  2.91574e-05|  1.68%|        if rg.Intersect.Intersection.MeshRay(mesh, ray) > 0:
   112|      8054|    0.0355704|  4.41649e-06|  0.11%|            intersects = True
   113|      8054|    0.0207567|  2.57719e-06|  0.06%|            break
   114|         0|            0|            0|  0.00%|
   115|     19136|    0.0547862|  2.86299e-06|  0.16%|    return intersects
   116|         0|            0|            0|  0.00%|
   117|      5533|    0.0240436|  4.34548e-06|  0.07%|def roof_ray_intersection(point, roofs, face_height, grid_size, offset):
   118|      5533|     0.155214|  2.80525e-05|  0.47%|    upwards_vector = rg.Vector3d(0,0,1)
   119|      5533|     0.291383|  5.26627e-05|  0.88%|    ray = rg.Ray3d(point, upwards_vector)
(call)|     11066|      0.19123|  1.72809e-05|  0.58%|# <string>:4 __init__
   120|         0|            0|            0|  0.00%|
   121|      5533|    0.0190094|  3.43563e-06|  0.06%|    success = False
   122|    246152|     0.655918|  2.66469e-06|  1.97%|    for roof in roofs:
   123|         0|            0|            0|  0.00%|        # 9.80%
   124|    240903|       4.8593|  2.01712e-05| 14.63%|        distance = rg.Intersect.Intersection.MeshRay(roof, ray)
   125|         0|            0|            0|  0.00%|
   126|    240903|     0.954423|  3.96186e-06|  2.87%|        if 0 < distance < 0.5 * face_height:
   127|       284|    0.0692329|  0.000243778|  0.21%|            point += upwards_vector * distance + rg.Vector3d(0,0,offset)
(call)|      1704|    0.0254881|  1.49578e-05|  0.08%|# <string>:4 __init__
   128|       284|            0|            0|  0.00%|            success = True
   129|       284|  0.000997066|   3.5108e-06|  0.00%|            break
   130|         0|            0|            0|  0.00%|
   131|      5533|    0.0150342|  2.71719e-06|  0.05%|    return success, point
   132|         0|            0|            0|  0.00%|
   133|      5249|    0.0355744|  6.77737e-06|  0.11%|def wall_ray_intersection(point, normal, walls, grid_size, offset, tolerance=0.1):
   134|      5249|     0.156825|   2.9877e-05|  0.47%|    upwards_vector = rg.Vector3f(0,0,1)
   135|         0|            0|            0|  0.00%|
   136|      5249|     0.174423|  3.32297e-05|  0.53%|    left_vector = rg.Vector3f.CrossProduct(normal, upwards_vector)
   137|      5249|     0.137257|  2.61491e-05|  0.41%|    right_vector = -left_vector
   138|         0|            0|            0|  0.00%|
   139|      5249|     0.777892|  0.000148198|  2.34%|    left_ray = rg.Ray3d(point, rg.Vector3d(left_vector))
(call)|     31494|     0.431214|  1.36919e-05|  1.30%|# <string>:4 __init__
   140|      5249|      0.70655|  0.000134607|  2.13%|    right_ray = rg.Ray3d(point, rg.Vector3d(right_vector))
(call)|     31494|     0.437341|  1.38865e-05|  1.32%|# <string>:4 __init__
   141|         0|            0|            0|  0.00%|
   142|      5249|    0.0285552|  5.44011e-06|  0.09%|    success = False
   143|    238242|     0.663081|  2.78322e-06|  2.00%|    for wall in walls:
   144|         0|            0|            0|  0.00%|        # 20%
   145|    233129|      4.78106|  2.05082e-05| 14.39%|        left_distance = rg.Intersect.Intersection.MeshRay(wall, left_ray)
   146|    233129|      5.12622|  2.19888e-05| 15.43%|        right_distance = rg.Intersect.Intersection.MeshRay(wall, right_ray)
   147|         0|            0|            0|  0.00%|
   148|    233129|      1.03389|  4.43483e-06|  3.11%|        if 0 < left_distance < 0.5 * grid_size - tolerance:
   149|        61|            0|            0|  0.00%|            if left_distance < right_distance:
   150|        61|   0.00616813|  0.000101117|  0.02%|                left_vector = rg.Vector3d.Multiply(rg.Vector3d(left_vector), left_distance + offset)
(call)|       488|    0.0110149|  2.25716e-05|  0.03%|# <string>:4 __init__
   151|        61|   0.00886393|   0.00014531|  0.03%|                point += left_vector
(call)|       244|   0.00100207|  4.10686e-06|  0.00%|# <string>:4 __init__
   152|        61|            0|            0|  0.00%|                success = True
   153|        61|  0.000997782|  1.63571e-05|  0.00%|                break
   154|         0|            0|            0|  0.00%|
   155|    233068|      0.71884|  3.08425e-06|  2.16%|        elif 0 < right_distance < 0.5 * grid_size - tolerance:
   156|       103|            0|            0|  0.00%|            if right_distance < left_distance:
   157|        75|    0.0142994|  0.000190659|  0.04%|                right_vector = rg.Vector3d.Multiply(rg.Vector3d(right_vector), right_distance + offset)
(call)|       600|   0.00909758|  1.51626e-05|  0.03%|# <string>:4 __init__
   158|        75|   0.00498486|  6.64647e-05|  0.02%|                point += right_vector
(call)|       300|   0.00398803|  1.32934e-05|  0.01%|# <string>:4 __init__
   159|        75|            0|            0|  0.00%|                success = True
   160|        75|            0|            0|  0.00%|                break
   161|         0|            0|            0|  0.00%|
   162|      5249|     0.018497|  3.52391e-06|  0.06%|    return success, point
   163|         0|            0|            0|  0.00%|
   164|         1|            0|            0|  0.00%|def compute(ground, roofs, walls, building_heights, grid_size, offset, quad_only=False):
   165|         1|            0|            0|  0.00%|    sensorpoints = []
   166|         1|            0|            0|  0.00%|    normals = []
   167|         0|            0|            0|  0.00%|
   168|         1|    0.0285413|    0.0285413|  0.09%|    ground_normals = list(ground.FaceNormals)
   169|     11176|     0.326042|  2.91734e-05|  0.98%|    ground_centroids = [ground.Faces.GetFaceCenter(System.Int32(i)) for i in range(ground.Faces.Count)]
(call)|         1|     0.326042|     0.326042|  0.98%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:169 <listcomp>
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|    # 8.73%
   172|         1|            0|            0|  0.00%|    start = time.time()
   173|         1|    0.0041914|    0.0041914|  0.01%|    ground_centroids = offset_points(ground_centroids, ground_normals, offset)
(call)|         1|     0.399939|     0.399939|  1.20%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:97 offset_points
   174|         1|            0|            0|  0.00%|    p1 = time.time() - start
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|    # 10.17%
   177|         1|            0|            0|  0.00%|    start = time.time()
   178|         1|            0|            0|  0.00%|    ground_centroids, ground_normals = delete_invalid_sensors(ground, ground_centroids, ground_normals)
(call)|         1|      4.21677|      4.21677| 12.69%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:38 delete_invalid_sensors
   179|         1|            0|            0|  0.00%|    p2 = time.time() - start
   180|         0|            0|            0|  0.00%|
   181|         1|            0|            0|  0.00%|    joined_roofs = join_meshes(roofs)
(call)|         1|    0.0104847|    0.0104847|  0.03%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:16 join_meshes
   182|         1|            0|            0|  0.00%|    roof_normals = joined_roofs.FaceNormals
   183|      6881|     0.404758|  5.88225e-05|  1.22%|    roof_centroids = [joined_roofs.Faces.GetFaceCenter(System.Int32(i)) for i in range(joined_roofs.Faces.Count)]
(call)|         1|     0.404758|     0.404758|  1.22%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:183 <listcomp>
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|    # 6.45%
   186|         1|            0|            0|  0.00%|    start = time.time()
   187|         1|   0.00550127|   0.00550127|  0.02%|    roof_centroids = offset_points(roof_centroids, roof_normals, offset)
(call)|         1|      0.42121|      0.42121|  1.27%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:97 offset_points
   188|         1|            0|            0|  0.00%|    p3 = time.time() - start
   189|         0|            0|            0|  0.00%|
   190|         1|            0|            0|  0.00%|    sensorpoints.extend(ground_centroids)
   191|         1|            0|            0|  0.00%|    normals.extend(ground_normals)
   192|         1|   0.00103068|   0.00103068|  0.00%|    sensorpoints.extend(roof_centroids)
   193|         1|    0.0172849|    0.0172849|  0.05%|    normals.extend(roof_normals)
   194|         0|            0|            0|  0.00%|
   195|         1|            0|            0|  0.00%|    meshes = [ground] + roofs
   196|         1|            0|            0|  0.00%|    joined_meshes = join_meshes(meshes)
(call)|         1|    0.0162785|    0.0162785|  0.05%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:16 join_meshes
   197|         0|            0|            0|  0.00%|
   198|         1|            0|            0|  0.00%|    start = time.time()
   199|        46|  0.000998259|  2.17013e-05|  0.00%|    for i, (wall, height) in enumerate(zip(walls, building_heights)):
   200|        45|   0.00205564|   4.5681e-05|  0.01%|        wall.FaceNormals.ComputeFaceNormals()
   201|         0|            0|            0|  0.00%|
   202|        45|   0.00150537|  3.34528e-05|  0.00%|        wall_normals = wall.FaceNormals
   203|     13722|     0.333347|  2.42929e-05|  1.00%|        wall_sensors = [wall.Faces.GetFaceCenter(j) for j in range(wall.Faces.Count)]
(call)|        45|     0.328242|   0.00729427|  0.99%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:203 <listcomp>
   204|        45|   0.00695109|  0.000154469|  0.02%|        wall_sensors = offset_points(wall_sensors, wall_normals, offset)
(call)|        45|     0.577903|    0.0128423|  1.74%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:97 offset_points
   205|         0|            0|            0|  0.00%|
   206|        45|  0.000997305|  2.21623e-05|  0.00%|        face_height = height / int(math.ceil(height / grid_size))
   207|         0|            0|            0|  0.00%|
   208|     13632|     0.148849|  1.09191e-05|  0.45%|        for point, normal in zip(wall_sensors, wall_normals):
   209|         0|            0|            0|  0.00%|            # 15.88%
   210|     13587|     0.167887|  1.23565e-05|  0.51%|            if is_above_mesh(point, [joined_meshes]):
(call)|     13587|      1.89125|  0.000139195|  5.69%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:105 is_above_mesh
   211|      8038|    0.0487928|  6.07027e-06|  0.15%|                sensorpoints.append(point)
   212|      8038|    0.0420218|  5.22789e-06|  0.13%|                normals.append(normal)
   213|         0|            0|            0|  0.00%|            # Check if the sensorpoints are under the corresponding walls' roof (because of splitting error)
   214|      5549|     0.217067|  3.91182e-05|  0.65%|            elif is_above_mesh(point, [meshes[i+1]], ray_vector=rg.Vector3d(0,0,1)):
(call)|      5549|     0.655084|  0.000118054|  1.97%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:105 is_above_mesh
   215|        16|   0.00250602|  0.000156626|  0.01%|                sensorpoints.append(point)
   216|        16|            0|            0|  0.00%|                normals.append(normal)
   217|         0|            0|            0|  0.00%|            else:
   218|         0|            0|            0|  0.00%|                # Try to move the sensorpoint to close roof + offset
   219|      5533|    0.0784564|  1.41797e-05|  0.24%|                success, point = roof_ray_intersection(point, roofs, face_height, grid_size, offset)
(call)|      5533|      7.26128|   0.00131236| 21.86%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:117 roof_ray_intersection
   220|         0|            0|            0|  0.00%|
   221|      5533|    0.0346906|  6.26977e-06|  0.10%|                if not success:
   222|         0|            0|            0|  0.00%|                    # Try to move the sensorpoint to close wall + offset
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|                    # 30.56%
   225|      5249|     0.134397|  2.56043e-05|  0.40%|                    success, point = wall_ray_intersection(point, normal, walls, grid_size, offset)
(call)|      5249|      15.2876|   0.00291249| 46.02%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:133 wall_ray_intersection
   226|         0|            0|            0|  0.00%|
   227|      5249|    0.0456114|  8.68954e-06|  0.14%|                    if not success:
   228|      5113|    0.0277922|   5.4356e-06|  0.08%|                        point = None
   229|      5113|    0.0256002|  5.00688e-06|  0.08%|                        normal = None
   230|         0|            0|            0|  0.00%|
   231|      5533|    0.0381157|   6.8888e-06|  0.11%|                sensorpoints.append(point)
   232|      5533|     0.037487|  6.77517e-06|  0.11%|                normals.append(normal)
   233|         1|            0|            0|  0.00%|    p4 = time.time() - start
   234|         0|            0|            0|  0.00%|
   235|         1|            0|            0|  0.00%|    start = time.time()
   236|         1|  0.000997543|  0.000997543|  0.00%|    meshes = [ground] + roofs + walls
   237|         1|            0|            0|  0.00%|    joined_mesh = rg.Mesh()
   238|        92|    0.0010016|  1.08869e-05|  0.00%|    for mesh in meshes:
   239|        91|    0.0240085|   0.00026383|  0.07%|        joined_mesh.Append(mesh)
(call)|       182|            0|            0|  0.00%|# <string>:4 __init__
   240|         0|            0|            0|  0.00%|
   241|         1|            0|            0|  0.00%|    if quad_only:
   242|         0|            0|            0|  0.00%|        horizontal_mesh = rg.Mesh()
   243|         0|            0|            0|  0.00%|        for mesh in meshes:
   244|         0|            0|            0|  0.00%|            horizontal_mesh.Append(mesh)
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|        new_sensorpoints = []
   247|         0|            0|            0|  0.00%|        new_normals = []
   248|         0|            0|            0|  0.00%|        for face, point, normal in zip(horizontal_mesh.Faces, sensorpoints, normals):
   249|         0|            0|            0|  0.00%|            if not face.IsTriangle:
   250|         0|            0|            0|  0.00%|                new_sensorpoints.append(point)
   251|         0|            0|            0|  0.00%|                new_normals.append(normal)
   252|         0|            0|            0|  0.00%|            else:
   253|         0|            0|            0|  0.00%|                new_sensorpoints.append(None)
   254|         0|            0|            0|  0.00%|                new_normals.append(None)
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|        sensorpoints = new_sensorpoints
   257|         0|            0|            0|  0.00%|        normals = new_normals
   258|         1|            0|            0|  0.00%|    p5 = time.time() - start
   259|         0|            0|            0|  0.00%|
   260|         1|            0|            0|  0.00%|    print(p1)
   261|         1|   0.00150609|   0.00150609|  0.00%|    print(p2)
   262|         1|            0|            0|  0.00%|    print(p3)
   263|         1|            0|            0|  0.00%|    print(p4)
   264|         1|            0|            0|  0.00%|    print(p5)
   265|         0|            0|            0|  0.00%|
   266|         1|            0|            0|  0.00%|    return sensorpoints, normals
   267|         0|            0|            0|  0.00%|
   268|         1|            0|            0|  0.00%|def filter_sensors(sensorpoints, normals):
   269|         1|            0|            0|  0.00%|    filtered_points = []
   270|         1|            0|            0|  0.00%|    filtered_normals = []
   271|         1|            0|            0|  0.00%|    pointmap = []
   272|         0|            0|            0|  0.00%|
   273|     31639|    0.0513642|  1.62345e-06|  0.15%|    for point, normal in zip(sensorpoints, normals):
   274|     31638|    0.0577683|  1.82592e-06|  0.17%|        if point is not None:
   275|     25312|    0.0617714|   2.4404e-06|  0.19%|            filtered_points.append(point)
   276|     25312|    0.0434432|  1.71631e-06|  0.13%|            filtered_normals.append(normal)
   277|     25312|    0.0463486|  1.83109e-06|  0.14%|            pointmap.append(True)
   278|         0|            0|            0|  0.00%|        else:
   279|      6326|    0.0105581|  1.66901e-06|  0.03%|            pointmap.append(False)
   280|         0|            0|            0|  0.00%|
   281|         1|            0|            0|  0.00%|    return filtered_points, filtered_normals, pointmap
   282|         0|            0|            0|  0.00%|
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|
File: <string>
File duration: 1.69008s (5.09%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|    116026|     0.322086|  2.77598e-06|  0.97%|
     5|    116026|     0.318666|   2.7465e-06|  0.96%|
     6|    116026|     0.273329|  2.35575e-06|  0.82%|
     7|    116026|     0.232882|  2.00715e-06|  0.70%|
     8|    116026|     0.278088|  2.39677e-06|  0.84%|
     9|    116026|     0.265027|   2.2842e-06|  0.80%|
File: c:/Users/Job de Vogel/OneDrive/Documenten/TU Delft/Master Thesis/Dataset_pipeline/dataset/main.py
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# HERE WE RECEIVE CMD ARGUMENTS
     2|         0|            0|            0|  0.00%|# HERE WE LOAD RHINO INSIDE
     3|         0|            0|            0|  0.00%|# HERE WE RUN ALL SCRIPTS FOR THE DATASET GENERATION
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|import rhinoinside
     6|         0|            0|            0|  0.00%|rhinoinside.load()
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|# import rhino_inside
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|# rhino_inside.load()
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|print('Finished loading rhinoinside...')
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
    15|         0|            0|            0|  0.00%|import System
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|import pickle
    18|         0|            0|            0|  0.00%|import pprofile
    19|         0|            0|            0|  0.00%|import time
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|from load_3dbag import file, outlines, height, meshing, sensors
    22|         0|            0|            0|  0.00%|# from visualize.mesh import show
    23|         0|            0|            0|  0.00%|from transform import points, model
    24|         0|            0|            0|  0.00%|from input_output import save, load
    25|         0|            0|            0|  0.00%|from simulate import run
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|def main():
    28|         0|            0|            0|  0.00%|    _, _, roof_meshes, wall_meshes, _, bbox = file.load("C://Users//Job de Vogel//OneDrive//Documenten//TU Delft//Master Thesis//Dataset_pipeline//3D_BAG_dataset//3dbag_v210908_fd2cee53_lod12_3d_5859.obj")
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|    patch_outlines = outlines.generate_outlines_from_bbox(bbox, 100, 58)
    31|         0|            0|            0|  0.00%|    heights = height.generate(roof_meshes)
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|    idx = 0
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|    patch_outline = patch_outlines[idx]
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|    print('Generating outlines...')
    38|         0|            0|            0|  0.00%|    building_outlines, courtyard_outlines, building_heights, GSI_score, envelope_area, building_area = outlines.generate_building_outlines(patch_outline, wall_meshes, heights)
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|    grid_size = 1.0
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|    print('Meshing walls...')
    43|         0|            0|            0|  0.00%|    walls, wall_outlines = meshing.generate_vertical(building_outlines, courtyard_outlines, building_heights, grid_size)
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|    print('Meshing ground and roofs...')
    46|         0|            0|            0|  0.00%|    '''
    47|         0|            0|            0|  0.00%|    RESOLVE: For some reason outlines are converted to nurbscurves here
    48|         0|            0|            0|  0.00%|    '''
    49|         0|            0|            0|  0.00%|    mesh_plane, roofs = meshing.generate_horizontal(patch_outline, building_outlines, courtyard_outlines, building_heights, grid_size)
    50|         0|            0|            0|  0.00%|    # profiler.dump_stats("C://Users//Job de Vogel//Desktop/stats.txt")
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|    '''
    53|         0|            0|            0|  0.00%|    SENSORS
    54|         0|            0|            0|  0.00%|    '''
    55|         0|            0|            0|  0.00%|    offset = 0.1
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|    profiler = pprofile.Profile()
    58|         0|            0|            0|  0.00%|    with profiler:
    59|         0|            0|            0|  0.00%|        sensorpoints, normals = sensors.compute(mesh_plane, roofs, walls, building_heights, grid_size, offset)
(call)|         1|      32.9478|      32.9478| 99.18%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:164 compute
    60|         0|            0|            0|  0.00%|        filtered_points, filtered_normals, pointmap = sensors.filter_sensors(sensorpoints, normals)
(call)|         1|     0.271254|     0.271254|  0.82%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:268 filter_sensors
    61|         0|            0|            0|  0.00%|    profiler.dump_stats("./stats/stats_2.txt")
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|    array = points.data_to_array(filtered_points, filtered_normals)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|    # save.save_array(array)
    66|         0|            0|            0|  0.00%|    save.save_array_as_list(array)
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|    # array = load.load_array('./data/array.npy')
    69|         0|            0|            0|  0.00%|    # List = load.load_array_as_list('./data/list_data.pkl')
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|    # roof_mesh = sensors.join_meshes(roofs)
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|    # rough_ground_mesh = meshing.remesh_horizontal(mesh_plane)
    74|         0|            0|            0|  0.00%|    # rough_roof_mesh = meshing.remesh_horizontal(roof_mesh)
    75|         0|            0|            0|  0.00%|    # rough_wall_meshes = [meshing.remesh_vertical(outline, height) for outline, height in zip(wall_outlines, building_heights)]
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|    # rough_wall_mesh = sensors.join_meshes(rough_wall_meshes)
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|    # HB_model = model.generate([rough_ground_mesh], [rough_roof_mesh], [rough_wall_mesh], filtered_points, filtered_normals)
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|    # wea = "C:\\Users\\Job de Vogel\\AppData\\Roaming\\ladybug_tools\\weather\\NLD_Amsterdam.062400_IWEC\\NLD_Amsterdam.062400_IWEC.epw"
    82|         0|            0|            0|  0.00%|    # sim_arguments = '-ab 6 -ad 25000 -as 4096 -c 1 -dc 0.75 -dp 512 -dr 3 -ds 0.05 -dt 0.15 -lr 8 -lw 4e-07 -ss 1.0 -st 0.15'
    83|         0|            0|            0|  0.00%|    # results = run.main(HB_model, wea, sim_arguments, pointmap)
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    # print(results)
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    # '''
    88|         0|            0|            0|  0.00%|    # IO
    89|         0|            0|            0|  0.00%|    # '''
    90|         0|            0|            0|  0.00%|    # print('Saving meshes...')
    91|         0|            0|            0|  0.00%|    # mesh_types = ['ground', 'walls', 'roofs']
    92|         0|            0|            0|  0.00%|    # meshes = [mesh_plane, walls, roofs]
    93|         0|            0|            0|  0.00%|    # save.save_mesh_to_json(meshes, mesh_types, 'test_sample', 'C://Users//Job de Vogel//Desktop')
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|    # load.load_mesh_from_json('test_sample', 'C://Users//Job de Vogel//Desktop', mesh_types)
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|    # '''
    98|         0|            0|            0|  0.00%|    # VISUALIZATION
    99|         0|            0|            0|  0.00%|    # '''
   100|         0|            0|            0|  0.00%|    # triangle_meshes = []
   101|         0|            0|            0|  0.00%|    # triangle_meshes.append(meshing.triangulate_quad(mesh_plane))
   102|         0|            0|            0|  0.00%|    # for roof in roofs:
   103|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(roof))
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|    # for wall in walls:
   106|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(wall))
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|    # show(triangle_meshes)
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|if __name__ == '__main__':
   111|         0|            0|            0|  0.00%|    main()
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|    print('finished')
