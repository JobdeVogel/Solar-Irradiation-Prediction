Total duration: 37.7358s
File: c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py
File duration: 36.1054s (95.68%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
     2|         0|            0|            0|  0.00%|import Rhino
     3|         0|            0|            0|  0.00%|import System
     4|         0|            0|            0|  0.00%|import time
     5|         0|            0|            0|  0.00%|import warnings
     6|         0|            0|            0|  0.00%|import sys
     7|         0|            0|            0|  0.00%|import rhino3dm
     8|         0|            0|            0|  0.00%|import pprofile
     9|         0|            0|            0|  0.00%|import math
    10|         0|            0|            0|  0.00%|import numpy as np
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|'''
    13|         0|            0|            0|  0.00%|Exception line 245 at index 11
    14|         0|            0|            0|  0.00%|'''
    15|         0|            0|            0|  0.00%|
    16|         1|            0|            0|  0.00%|def join_meshes(meshes):
    17|         1|            0|            0|  0.00%|    joined_meshes = rg.Mesh()
    18|        46|            0|            0|  0.00%|    for mesh in meshes:
    19|        45|   0.00753069|  0.000167349|  0.02%|        joined_meshes.Append(mesh)
(call)|        90|     0.001019|  1.13222e-05|  0.00%|# <string>:4 __init__
    20|         0|            0|            0|  0.00%|
    21|         1|            0|            0|  0.00%|    return joined_meshes
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|#8.94%
    24|     11173|    0.0286114|  2.56076e-06|  0.08%|def get_face_vertices(face, mesh):
    25|     11173|      0.71879|  6.43328e-05|  1.90%|    vertex_0 = rg.Point3d(mesh.Vertices[face.A].X, mesh.Vertices[face.A].Y, mesh.Vertices[face.A].Z)
    26|     11173|      0.73447|  6.57362e-05|  1.95%|    vertex_1 = rg.Point3d(mesh.Vertices[face.B].X, mesh.Vertices[face.B].Y, mesh.Vertices[face.B].Z)
    27|     11173|     0.720436|  6.44801e-05|  1.91%|    vertex_2 = rg.Point3d(mesh.Vertices[face.C].X, mesh.Vertices[face.C].Y, mesh.Vertices[face.C].Z)
    28|     11173|     0.708479|  6.34099e-05|  1.88%|    vertex_3 = rg.Point3d(mesh.Vertices[face.D].X, mesh.Vertices[face.D].Y, mesh.Vertices[face.D].Z)
    29|         0|            0|            0|  0.00%|
    30|     11173|    0.0667753|  5.97649e-06|  0.18%|    if face.IsQuad:
    31|      7628|     0.018522|  2.42816e-06|  0.05%|        return [vertex_0, vertex_1, vertex_2, vertex_3]
    32|         0|            0|            0|  0.00%|    else:
    33|      3545|    0.0110643|   3.1211e-06|  0.03%|        return [vertex_0, vertex_1, vertex_2]
    34|         0|            0|            0|  0.00%|
    35|         1|            0|            0|  0.00%|def delete_invalid_sensors(mesh, sensors, normals, minimum_angle = 0.017, minimum_area=0.0001):
    36|     11174|     0.137709|   1.2324e-05|  0.36%|    for i, (face, normal) in enumerate(zip(mesh.Faces, mesh.FaceNormals)):
    37|     11173|     0.102015|  9.13052e-06|  0.27%|        vertices = get_face_vertices(face, mesh)
(call)|     11173|      3.00715|  0.000269144|  7.97%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:24 get_face_vertices
    38|         0|            0|            0|  0.00%|
    39|     11173|     0.064604|  5.78216e-06|  0.17%|        if face.IsTriangle:
    40|      3545|    0.0787838|  2.22239e-05|  0.21%|            triangle = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    41|      3545|    0.0266597|  7.52037e-06|  0.07%|            min_angle = min([triangle.AngleA, triangle.AngleB, triangle.AngleC])
    42|         0|            0|            0|  0.00%|
    43|      3545|   0.00745344|  2.10252e-06|  0.02%|            if min_angle < minimum_angle:
    44|      1035|   0.00303054|  2.92806e-06|  0.01%|                sensors[i] = None
    45|      1035|   0.00302505|  2.92276e-06|  0.01%|                normals[i] = None
    46|      2510|    0.0150113|   5.9806e-06|  0.04%|            elif triangle.Area < minimum_area:
    47|       178|            0|            0|  0.00%|                sensors[i] = None
    48|       178|  0.000995874|   5.5948e-06|  0.00%|                normals[i] = None
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|#        elif face.IsQuad:
    51|         0|            0|            0|  0.00%|#            rectangle = rg.Rectangle3d(rg.Plane.WorldXY, vertices[0], vertices[2])
    52|         0|            0|            0|  0.00%|#
    53|         0|            0|            0|  0.00%|#            triangle_1 = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    54|         0|            0|            0|  0.00%|#            triangle_2 = rg.Triangle3d(vertices[2], vertices[3], vertices[0])
    55|         0|            0|            0|  0.00%|#
    56|         0|            0|            0|  0.00%|#            min_angle = min([triangle_1.AngleA, triangle_1.AngleB, triangle_1.AngleC, triangle_2.AngleA, triangle_2.AngleB, triangle_2.AngleC])
    57|         0|            0|            0|  0.00%|#
    58|         0|            0|            0|  0.00%|#            if min_angle < minimum_angle:
    59|         0|            0|            0|  0.00%|#                sensors[i] = None
    60|         0|            0|            0|  0.00%|#                normals[i] = None
    61|         0|            0|            0|  0.00%|#            elif triangle_1.Area < minimum_area or triangle_2.Area < minimum_area:
    62|         0|            0|            0|  0.00%|#                sensors[i] = None
    63|         0|            0|            0|  0.00%|#                normals[i] = None
    64|         0|            0|            0|  0.00%|
    65|         1|            0|            0|  0.00%|    return sensors, normals
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|# def compute_centroids(mesh, offset):
    68|         0|            0|            0|  0.00%|#     vectors = [rg.Vector3f.Multiply(mesh.FaceNormals[i], offset) for i in xrange(mesh.Faces.Count)]
    69|         0|            0|            0|  0.00%|#     centroids = [mesh.Faces.GetFaceCenter(i) for i in xrange(mesh.Faces.Count)]
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|#     for centroid, vec in zip(centroids, vectors):
    72|         0|            0|            0|  0.00%|#         centroid.Transform(rg.Transform.Translation(vec))
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|#     return centroids, vectors
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|# Make faster with Numpy, using arrays of vectors
    77|         0|            0|            0|  0.00%|def perpendicular_wall_vectors(vector):
    78|         0|            0|            0|  0.00%|    z_vector = rg.Vector3f(0,0,1)
    79|         0|            0|            0|  0.00%|    vec1 = rg.Vector3f.CrossProduct(vector, z_vector)
    80|         0|            0|            0|  0.00%|    vec2 = -vec1
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|    return (vec1, vec2)
    83|         0|            0|            0|  0.00%|
    84|        47|            0|            0|  0.00%|def _to_numpy(points, vectors, offset):
    85|     31779|     0.202964|  6.38674e-06|  0.54%|    np_points = np.array([[point.X, point.Y, point.Z] for point in points])
(call)|        47|     0.176819|   0.00376211|  0.47%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:85 <listcomp>
    86|     31779|     0.280662|  8.83168e-06|  0.74%|    np_vectors = np.array([[vector.X, vector.Y, vector.Z] for vector in vectors]) * offset
(call)|        47|     0.253684|   0.00539753|  0.67%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:86 <listcomp>
    87|         0|            0|            0|  0.00%|
    88|        47|            0|            0|  0.00%|    new_points = np_points + np_vectors
    89|     31779|     0.832275|  2.61895e-05|  2.21%|    rg_points = [rg.Point3d(*point) for point in new_points]
(call)|        47|     0.832275|     0.017708|  2.21%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:89 <listcomp>
    90|         0|            0|            0|  0.00%|
    91|        47|            0|            0|  0.00%|    return rg_points
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|#11.99%
    94|        47|     0.001055|  2.24469e-05|  0.00%|def offset_points(points, vectors, offset):
    95|         0|            0|            0|  0.00%|    # offset_vectors = [rg.Vector3f.Multiply(vec, offset) for vec in vectors]
    96|         0|            0|            0|  0.00%|    # points = [point + offset_vec for point, offset_vec in zip(points, offset_vectors)]
    97|         0|            0|            0|  0.00%|
    98|        47|            0|            0|  0.00%|    points = _to_numpy(points, vectors, offset)
(call)|        47|       1.3159|    0.0279979|  3.49%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:84 _to_numpy
    99|         0|            0|            0|  0.00%|
   100|        47|            0|            0|  0.00%|    return points
   101|         0|            0|            0|  0.00%|
   102|     19136|     0.057385|   2.9988e-06|  0.15%|def is_above_mesh(point, meshes, ray_vector=rg.Vector3d(0,0,-1)):
   103|     19136|    0.0606213|  3.16792e-06|  0.16%|    intersects = False
   104|     19136|      1.17841|  6.15809e-05|  3.12%|    ray = rg.Ray3d(point, ray_vector)
(call)|     38272|      0.52478|  1.37118e-05|  1.39%|# <string>:4 __init__
   105|         0|            0|            0|  0.00%|
   106|    281682|      1.00216|  3.55778e-06|  2.66%|    for mesh in meshes:
   107|         0|            0|            0|  0.00%|        #11.28%
   108|    270600|      5.27803|  1.95049e-05| 13.99%|        if rg.Intersect.Intersection.MeshRay(mesh, ray) > 0:
   109|      8054|    0.0325561|  4.04222e-06|  0.09%|            intersects = True
   110|      8054|    0.0232768|  2.89009e-06|  0.06%|            break
   111|         0|            0|            0|  0.00%|
   112|     19136|    0.0342941|  1.79213e-06|  0.09%|    return intersects
   113|         0|            0|            0|  0.00%|
   114|      5533|    0.0261064|   4.7183e-06|  0.07%|def roof_ray_intersection(point, roofs, face_height, grid_size, offset):
   115|      5533|     0.146909|  2.65514e-05|  0.39%|    upwards_vector = rg.Vector3d(0,0,1)
   116|      5533|     0.324642|  5.86739e-05|  0.86%|    ray = rg.Ray3d(point, upwards_vector)
(call)|     11066|     0.144439|  1.30525e-05|  0.38%|# <string>:4 __init__
   117|         0|            0|            0|  0.00%|
   118|      5533|    0.0179865|  3.25077e-06|  0.05%|    success = False
   119|    246152|      0.66102|  2.68542e-06|  1.75%|    for roof in roofs:
   120|         0|            0|            0|  0.00%|        # 9.80%
   121|    240903|      4.70847|  1.95451e-05| 12.48%|        distance = rg.Intersect.Intersection.MeshRay(roof, ray)
   122|         0|            0|            0|  0.00%|
   123|    240903|      1.03282|  4.28729e-06|  2.74%|        if 0 < distance < 0.5 * face_height:
   124|       284|    0.0530934|  0.000186949|  0.14%|            point += upwards_vector * distance + rg.Vector3d(0,0,offset)
(call)|      1704|    0.0292342|  1.71562e-05|  0.08%|# <string>:4 __init__
   125|       284|  0.000997305|  3.51164e-06|  0.00%|            success = True
   126|       284|            0|            0|  0.00%|            break
   127|         0|            0|            0|  0.00%|
   128|      5533|    0.0250323|  4.52418e-06|  0.07%|    return success, point
   129|         0|            0|            0|  0.00%|
   130|      5249|    0.0248549|  4.73517e-06|  0.07%|def wall_ray_intersection(point, normal, walls, grid_size, offset, tolerance=0.1):
   131|      5249|     0.158318|  3.01615e-05|  0.42%|    upwards_vector = rg.Vector3f(0,0,1)
   132|         0|            0|            0|  0.00%|
   133|      5249|      0.13839|   2.6365e-05|  0.37%|    left_vector = rg.Vector3f.CrossProduct(normal, upwards_vector)
   134|      5249|     0.127423|  2.42757e-05|  0.34%|    right_vector = -left_vector
   135|         0|            0|            0|  0.00%|
   136|      5249|     0.770614|  0.000146812|  2.04%|    left_ray = rg.Ray3d(point, rg.Vector3d(left_vector))
(call)|     31494|      0.45768|  1.45323e-05|  1.21%|# <string>:4 __init__
   137|      5249|     0.664241|  0.000126546|  1.76%|    right_ray = rg.Ray3d(point, rg.Vector3d(right_vector))
(call)|     31494|     0.443898|  1.40947e-05|  1.18%|# <string>:4 __init__
   138|         0|            0|            0|  0.00%|
   139|      5249|    0.0306063|  5.83088e-06|  0.08%|    success = False
   140|    238242|     0.654067|  2.74539e-06|  1.73%|    for wall in walls:
   141|         0|            0|            0|  0.00%|        # 20%
   142|    233129|      4.77737|  2.04924e-05| 12.66%|        left_distance = rg.Intersect.Intersection.MeshRay(wall, left_ray)
   143|    233129|      5.02787|  2.15669e-05| 13.32%|        right_distance = rg.Intersect.Intersection.MeshRay(wall, right_ray)
   144|         0|            0|            0|  0.00%|
   145|    233129|      1.02946|  4.41585e-06|  2.73%|        if 0 < left_distance < 0.5 * grid_size - tolerance:
   146|        61|            0|            0|  0.00%|            if left_distance < right_distance:
   147|        61|    0.0134811|  0.000221002|  0.04%|                left_vector = rg.Vector3d.Multiply(rg.Vector3d(left_vector), left_distance + offset)
(call)|       488|   0.00908184|  1.86103e-05|  0.02%|# <string>:4 __init__
   148|        61|   0.00705743|  0.000115696|  0.02%|                point += left_vector
(call)|       244|   0.00200176|  8.20394e-06|  0.01%|# <string>:4 __init__
   149|        61|            0|            0|  0.00%|                success = True
   150|        61|            0|            0|  0.00%|                break
   151|         0|            0|            0|  0.00%|
   152|    233068|     0.694212|  2.97858e-06|  1.84%|        elif 0 < right_distance < 0.5 * grid_size - tolerance:
   153|       103|  0.000998974|  9.69878e-06|  0.00%|            if right_distance < left_distance:
   154|        75|    0.0110724|  0.000147632|  0.03%|                right_vector = rg.Vector3d.Multiply(rg.Vector3d(right_vector), right_distance + offset)
(call)|       600|    0.0122504|  2.04174e-05|  0.03%|# <string>:4 __init__
   155|        75|   0.00660968|   8.8129e-05|  0.02%|                point += right_vector
(call)|       300|   0.00399756|  1.33252e-05|  0.01%|# <string>:4 __init__
   156|        75|            0|            0|  0.00%|                success = True
   157|        75|            0|            0|  0.00%|                break
   158|         0|            0|            0|  0.00%|
   159|      5249|    0.0152149|  2.89863e-06|  0.04%|    return success, point
   160|         0|            0|            0|  0.00%|
   161|         1|            0|            0|  0.00%|def compute(ground, roofs, walls, building_heights, grid_size, offset, quad_only=False):
   162|         1|            0|            0|  0.00%|    sensorpoints = []
   163|         1|            0|            0|  0.00%|    normals = []
   164|         0|            0|            0|  0.00%|
   165|         1|    0.0298843|    0.0298843|  0.08%|    ground_normals = list(ground.FaceNormals)
   166|     11176|     0.344691|  3.08421e-05|  0.91%|    ground_centroids = [ground.Faces.GetFaceCenter(System.Int32(i)) for i in range(ground.Faces.Count)]
(call)|         1|     0.344691|     0.344691|  0.91%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:166 <listcomp>
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|    # 8.73%
   169|         1|            0|            0|  0.00%|    start = time.time()
   170|         1|   0.00599027|   0.00599027|  0.02%|    ground_centroids = offset_points(ground_centroids, ground_normals, offset)
(call)|         1|     0.410821|     0.410821|  1.09%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:94 offset_points
   171|         1|            0|            0|  0.00%|    p1 = time.time() - start
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|    # 10.17%
   174|         1|            0|            0|  0.00%|    start = time.time()
   175|         1|            0|            0|  0.00%|    ground_centroids, ground_normals = delete_invalid_sensors(ground, ground_centroids, ground_normals)
(call)|         1|      3.44644|      3.44644|  9.13%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:35 delete_invalid_sensors
   176|         1|            0|            0|  0.00%|    p2 = time.time() - start
   177|         0|            0|            0|  0.00%|
   178|         1|  0.000967979|  0.000967979|  0.00%|    joined_roofs = join_meshes(roofs)
(call)|         1|   0.00854969|   0.00854969|  0.02%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:16 join_meshes
   179|         1|            0|            0|  0.00%|    roof_normals = joined_roofs.FaceNormals
   180|      6881|     0.301997|  4.38885e-05|  0.80%|    roof_centroids = [joined_roofs.Faces.GetFaceCenter(System.Int32(i)) for i in range(joined_roofs.Faces.Count)]
(call)|         1|     0.301997|     0.301997|  0.80%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:180 <listcomp>
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|    # 6.45%
   183|         1|            0|            0|  0.00%|    start = time.time()
   184|         1|   0.00352001|   0.00352001|  0.01%|    roof_centroids = offset_points(roof_centroids, roof_normals, offset)
(call)|         1|     0.324007|     0.324007|  0.86%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:94 offset_points
   185|         1|            0|            0|  0.00%|    p3 = time.time() - start
   186|         0|            0|            0|  0.00%|
   187|         1|            0|            0|  0.00%|    sensorpoints.extend(ground_centroids)
   188|         1|            0|            0|  0.00%|    normals.extend(ground_normals)
   189|         1|            0|            0|  0.00%|    sensorpoints.extend(roof_centroids)
   190|         1|    0.0154696|    0.0154696|  0.04%|    normals.extend(roof_normals)
   191|         0|            0|            0|  0.00%|
   192|         1|            0|            0|  0.00%|    meshes = [ground] + roofs
   193|         0|            0|            0|  0.00%|
   194|         1|            0|            0|  0.00%|    start = time.time()
   195|        46|  0.000503778|  1.09517e-05|  0.00%|    for i, (wall, height) in enumerate(zip(walls, building_heights)):
   196|        45|   0.00299048|  6.64552e-05|  0.01%|        wall.FaceNormals.ComputeFaceNormals()
   197|         0|            0|            0|  0.00%|
   198|        45|   0.00150728|  3.34952e-05|  0.00%|        wall_normals = wall.FaceNormals
   199|     13722|     0.331064|  2.41265e-05|  0.88%|        wall_sensors = [wall.Faces.GetFaceCenter(j) for j in range(wall.Faces.Count)]
(call)|        45|     0.326522|   0.00725604|  0.87%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:199 <listcomp>
   200|        45|   0.00954914|  0.000212203|  0.03%|        wall_sensors = offset_points(wall_sensors, wall_normals, offset)
(call)|        45|     0.582128|    0.0129362|  1.54%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:94 offset_points
   201|         0|            0|            0|  0.00%|
   202|        45|  0.000993729|  2.20829e-05|  0.00%|        face_height = height / int(math.ceil(height / grid_size))
   203|         0|            0|            0|  0.00%|
   204|     13632|     0.190662|  1.39863e-05|  0.51%|        for point, normal in zip(wall_sensors, wall_normals):
   205|         0|            0|            0|  0.00%|            # 15.88%
   206|     13587|     0.210555|  1.54968e-05|  0.56%|            if is_above_mesh(point, meshes):
(call)|     13587|      7.44269|   0.00054778| 19.72%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:102 is_above_mesh
   207|      8038|    0.0482314|  6.00042e-06|  0.13%|                sensorpoints.append(point)
   208|      8038|    0.0554011|   6.8924e-06|  0.15%|                normals.append(normal)
   209|         0|            0|            0|  0.00%|            # Check if the sensorpoints are under the corresponding walls' roof (because of splitting error)
   210|      5549|     0.246374|  4.43996e-05|  0.65%|            elif is_above_mesh(point, [meshes[i+1]], ray_vector=rg.Vector3d(0,0,1)):
(call)|      5549|     0.748831|  0.000134949|  1.98%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:102 is_above_mesh
   211|        16|  0.000997305|  6.23316e-05|  0.00%|                sensorpoints.append(point)
   212|        16|            0|            0|  0.00%|                normals.append(normal)
   213|         0|            0|            0|  0.00%|            else:
   214|         0|            0|            0|  0.00%|                # Try to move the sensorpoint to close roof + offset
   215|      5533|     0.105309|  1.90328e-05|  0.28%|                success, point = roof_ray_intersection(point, roofs, face_height, grid_size, offset)
(call)|      5533|      7.17075|     0.001296| 19.00%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:114 roof_ray_intersection
   216|         0|            0|            0|  0.00%|
   217|      5533|     0.030791|  5.56498e-06|  0.08%|                if not success:
   218|         0|            0|            0|  0.00%|                    # Try to move the sensorpoint to close wall + offset
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|                    # 30.56%
   221|      5249|     0.105354|  2.00712e-05|  0.28%|                    success, point = wall_ray_intersection(point, normal, walls, grid_size, offset)
(call)|      5249|      15.0808|   0.00287308| 39.96%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:130 wall_ray_intersection
   222|         0|            0|            0|  0.00%|
   223|      5249|    0.0251865|  4.79835e-06|  0.07%|                    if not success:
   224|      5113|    0.0316064|  6.18158e-06|  0.08%|                        point = None
   225|      5113|    0.0282836|   5.5317e-06|  0.07%|                        normal = None
   226|         0|            0|            0|  0.00%|
   227|      5533|    0.0331316|    5.988e-06|  0.09%|                sensorpoints.append(point)
   228|      5533|    0.0330684|  5.97658e-06|  0.09%|                normals.append(normal)
   229|         1|            0|            0|  0.00%|    p4 = time.time() - start
   230|         0|            0|            0|  0.00%|
   231|         1|            0|            0|  0.00%|    start = time.time()
   232|         1|            0|            0|  0.00%|    meshes = [ground] + roofs + walls
   233|         1|            0|            0|  0.00%|    joined_mesh = rg.Mesh()
   234|        92|            0|            0|  0.00%|    for mesh in meshes:
   235|        91|    0.0271678|  0.000298547|  0.07%|        joined_mesh.Append(mesh)
(call)|       182|  0.000994444|  5.46398e-06|  0.00%|# <string>:4 __init__
   236|         0|            0|            0|  0.00%|
   237|         1|            0|            0|  0.00%|    if quad_only:
   238|         0|            0|            0|  0.00%|        horizontal_mesh = rg.Mesh()
   239|         0|            0|            0|  0.00%|        for mesh in meshes:
   240|         0|            0|            0|  0.00%|            horizontal_mesh.Append(mesh)
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|        new_sensorpoints = []
   243|         0|            0|            0|  0.00%|        new_normals = []
   244|         0|            0|            0|  0.00%|        for face, point, normal in zip(horizontal_mesh.Faces, sensorpoints, normals):
   245|         0|            0|            0|  0.00%|            if not face.IsTriangle:
   246|         0|            0|            0|  0.00%|                new_sensorpoints.append(point)
   247|         0|            0|            0|  0.00%|                new_normals.append(normal)
   248|         0|            0|            0|  0.00%|            else:
   249|         0|            0|            0|  0.00%|                new_sensorpoints.append(None)
   250|         0|            0|            0|  0.00%|                new_normals.append(None)
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|        sensorpoints = new_sensorpoints
   253|         0|            0|            0|  0.00%|        normals = new_normals
   254|         1|            0|            0|  0.00%|    p5 = time.time() - start
   255|         0|            0|            0|  0.00%|
   256|         1|            0|            0|  0.00%|    print(p1)
   257|         1|  0.000941753|  0.000941753|  0.00%|    print(p2)
   258|         1|            0|            0|  0.00%|    print(p3)
   259|         1|            0|            0|  0.00%|    print(p4)
   260|         1|            0|            0|  0.00%|    print(p5)
   261|         0|            0|            0|  0.00%|
   262|         1|            0|            0|  0.00%|    return sensorpoints, normals
   263|         0|            0|            0|  0.00%|
   264|         1|            0|            0|  0.00%|def filter_sensors(sensorpoints, normals):
   265|         1|            0|            0|  0.00%|    filtered_points = []
   266|         1|            0|            0|  0.00%|    filtered_normals = []
   267|         1|            0|            0|  0.00%|    pointmap = []
   268|         0|            0|            0|  0.00%|
   269|     31639|    0.0682244|  2.15634e-06|  0.18%|    for point, normal in zip(sensorpoints, normals):
   270|     31638|    0.0471549|  1.49045e-06|  0.12%|        if point is not None:
   271|     25312|    0.0532944|   2.1055e-06|  0.14%|            filtered_points.append(point)
   272|     25312|    0.0443456|  1.75196e-06|  0.12%|            filtered_normals.append(normal)
   273|     25312|    0.0659645|  2.60605e-06|  0.17%|            pointmap.append(True)
   274|         0|            0|            0|  0.00%|        else:
   275|      6326|     0.017607|  2.78327e-06|  0.05%|            pointmap.append(False)
   276|         0|            0|            0|  0.00%|
   277|         1|            0|            0|  0.00%|    return filtered_points, filtered_normals, pointmap
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|
File: <string>
File duration: 1.62937s (4.32%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|    115934|     0.333432|  2.87605e-06|  0.88%|
     5|    115934|     0.288847|  2.49148e-06|  0.77%|
     6|    115934|     0.270883|  2.33652e-06|  0.72%|
     7|    115934|     0.252773|  2.18032e-06|  0.67%|
     8|    115934|     0.247913|   2.1384e-06|  0.66%|
     9|    115934|     0.235527|  2.03156e-06|  0.62%|
File: c:/Users/Job de Vogel/OneDrive/Documenten/TU Delft/Master Thesis/Dataset_pipeline/dataset/main.py
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# HERE WE RECEIVE CMD ARGUMENTS
     2|         0|            0|            0|  0.00%|# HERE WE LOAD RHINO INSIDE
     3|         0|            0|            0|  0.00%|# HERE WE RUN ALL SCRIPTS FOR THE DATASET GENERATION
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|import rhinoinside
     6|         0|            0|            0|  0.00%|rhinoinside.load()
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|# import rhino_inside
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|# rhino_inside.load()
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|print('Finished loading rhinoinside...')
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
    15|         0|            0|            0|  0.00%|import System
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|import pickle
    18|         0|            0|            0|  0.00%|import pprofile
    19|         0|            0|            0|  0.00%|import time
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|from load_3dbag import file, outlines, height, meshing, sensors
    22|         0|            0|            0|  0.00%|# from visualize.mesh import show
    23|         0|            0|            0|  0.00%|from transform import points, model
    24|         0|            0|            0|  0.00%|from input_output import save, load
    25|         0|            0|            0|  0.00%|from simulate import run
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|def main():
    28|         0|            0|            0|  0.00%|    _, _, roof_meshes, wall_meshes, _, bbox = file.load("C://Users//Job de Vogel//OneDrive//Documenten//TU Delft//Master Thesis//Dataset_pipeline//3D_BAG_dataset//3dbag_v210908_fd2cee53_lod12_3d_5859.obj")
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|    patch_outlines = outlines.generate_outlines_from_bbox(bbox, 100, 58)
    31|         0|            0|            0|  0.00%|    heights = height.generate(roof_meshes)
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|    idx = 0
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|    patch_outline = patch_outlines[idx]
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|    print('Generating outlines...')
    38|         0|            0|            0|  0.00%|    building_outlines, courtyard_outlines, building_heights, GSI_score, envelope_area, building_area = outlines.generate_building_outlines(patch_outline, wall_meshes, heights)
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|    grid_size = 1.0
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|    print('Meshing walls...')
    43|         0|            0|            0|  0.00%|    walls, wall_outlines = meshing.generate_vertical(building_outlines, courtyard_outlines, building_heights, grid_size)
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|    print('Meshing ground and roofs...')
    46|         0|            0|            0|  0.00%|    '''
    47|         0|            0|            0|  0.00%|    RESOLVE: For some reason outlines are converted to nurbscurves here
    48|         0|            0|            0|  0.00%|    '''
    49|         0|            0|            0|  0.00%|    mesh_plane, roofs = meshing.generate_horizontal(patch_outline, building_outlines, courtyard_outlines, building_heights, grid_size)
    50|         0|            0|            0|  0.00%|    # profiler.dump_stats("C://Users//Job de Vogel//Desktop/stats.txt")
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|    '''
    53|         0|            0|            0|  0.00%|    SENSORS
    54|         0|            0|            0|  0.00%|    '''
    55|         0|            0|            0|  0.00%|    offset = 0.1
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|    profiler = pprofile.Profile()
    58|         0|            0|            0|  0.00%|    with profiler:
    59|         0|            0|            0|  0.00%|        sensorpoints, normals = sensors.compute(mesh_plane, roofs, walls, building_heights, grid_size, offset)
(call)|         1|      37.4382|      37.4382| 99.21%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:161 compute
    60|         0|            0|            0|  0.00%|        filtered_points, filtered_normals, pointmap = sensors.filter_sensors(sensorpoints, normals)
(call)|         1|     0.296591|     0.296591|  0.79%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:264 filter_sensors
    61|         0|            0|            0|  0.00%|    profiler.dump_stats("./stats/stats.txt")
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|    array = points.data_to_array(filtered_points, filtered_normals)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|    # save.save_array(array)
    66|         0|            0|            0|  0.00%|    save.save_array_as_list(array)
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|    # array = load.load_array('./data/array.npy')
    69|         0|            0|            0|  0.00%|    # List = load.load_array_as_list('./data/list_data.pkl')
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|    # roof_mesh = sensors.join_meshes(roofs)
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|    # rough_ground_mesh = meshing.remesh_horizontal(mesh_plane)
    74|         0|            0|            0|  0.00%|    # rough_roof_mesh = meshing.remesh_horizontal(roof_mesh)
    75|         0|            0|            0|  0.00%|    # rough_wall_meshes = [meshing.remesh_vertical(outline, height) for outline, height in zip(wall_outlines, building_heights)]
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|    # rough_wall_mesh = sensors.join_meshes(rough_wall_meshes)
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|    # HB_model = model.generate([rough_ground_mesh], [rough_roof_mesh], [rough_wall_mesh], filtered_points, filtered_normals)
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|    # wea = "C:\\Users\\Job de Vogel\\AppData\\Roaming\\ladybug_tools\\weather\\NLD_Amsterdam.062400_IWEC\\NLD_Amsterdam.062400_IWEC.epw"
    82|         0|            0|            0|  0.00%|    # sim_arguments = '-ab 6 -ad 25000 -as 4096 -c 1 -dc 0.75 -dp 512 -dr 3 -ds 0.05 -dt 0.15 -lr 8 -lw 4e-07 -ss 1.0 -st 0.15'
    83|         0|            0|            0|  0.00%|    # results = run.main(HB_model, wea, sim_arguments, pointmap)
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    # print(results)
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    # '''
    88|         0|            0|            0|  0.00%|    # IO
    89|         0|            0|            0|  0.00%|    # '''
    90|         0|            0|            0|  0.00%|    # print('Saving meshes...')
    91|         0|            0|            0|  0.00%|    # mesh_types = ['ground', 'walls', 'roofs']
    92|         0|            0|            0|  0.00%|    # meshes = [mesh_plane, walls, roofs]
    93|         0|            0|            0|  0.00%|    # save.save_mesh_to_json(meshes, mesh_types, 'test_sample', 'C://Users//Job de Vogel//Desktop')
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|    # load.load_mesh_from_json('test_sample', 'C://Users//Job de Vogel//Desktop', mesh_types)
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|    # '''
    98|         0|            0|            0|  0.00%|    # VISUALIZATION
    99|         0|            0|            0|  0.00%|    # '''
   100|         0|            0|            0|  0.00%|    # triangle_meshes = []
   101|         0|            0|            0|  0.00%|    # triangle_meshes.append(meshing.triangulate_quad(mesh_plane))
   102|         0|            0|            0|  0.00%|    # for roof in roofs:
   103|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(roof))
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|    # for wall in walls:
   106|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(wall))
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|    # show(triangle_meshes)
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|if __name__ == '__main__':
   111|         0|            0|            0|  0.00%|    main()
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|    print('finished')
