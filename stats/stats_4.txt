Total duration: 14.2272s
File: c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py
File duration: 12.6696s (89.05%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
     2|         0|            0|            0|  0.00%|import Rhino
     3|         0|            0|            0|  0.00%|import System
     4|         0|            0|            0|  0.00%|import time
     5|         0|            0|            0|  0.00%|import warnings
     6|         0|            0|            0|  0.00%|import sys
     7|         0|            0|            0|  0.00%|import rhino3dm
     8|         0|            0|            0|  0.00%|import pprofile
     9|         0|            0|            0|  0.00%|import math
    10|         0|            0|            0|  0.00%|import numpy as np
    11|         0|            0|            0|  0.00%|import copy
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|'''
    14|         0|            0|            0|  0.00%|Exception line 245 at index 11
    15|         0|            0|            0|  0.00%|'''
    16|         0|            0|            0|  0.00%|
    17|         3|            0|            0|  0.00%|def join_meshes(meshes):
    18|         3|            0|            0|  0.00%|    joined_meshes = rg.Mesh()
    19|       139|            0|            0|  0.00%|    for mesh in meshes:
    20|       136|    0.0300925|  0.000221268|  0.21%|        joined_meshes.Append(mesh)
(call)|       272|   0.00196648|  7.22969e-06|  0.01%|# <string>:4 __init__
    21|         0|            0|            0|  0.00%|
    22|         3|            0|            0|  0.00%|    return joined_meshes
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|#8.94%
    25|     11173|    0.0295174|  2.64185e-06|  0.21%|def get_face_vertices(face, mesh):
    26|         0|            0|            0|  0.00%|    # vertex_0 = rg.Point3d(mesh.Vertices[face.A].X, mesh.Vertices[face.A].Y, mesh.Vertices[face.A].Z)
    27|         0|            0|            0|  0.00%|    # vertex_1 = rg.Point3d(mesh.Vertices[face.B].X, mesh.Vertices[face.B].Y, mesh.Vertices[face.B].Z)
    28|         0|            0|            0|  0.00%|    # vertex_2 = rg.Point3d(mesh.Vertices[face.C].X, mesh.Vertices[face.C].Y, mesh.Vertices[face.C].Z)
    29|         0|            0|            0|  0.00%|    # vertex_3 = rg.Point3d(mesh.Vertices[face.D].X, mesh.Vertices[face.D].Y, mesh.Vertices[face.D].Z)
    30|         0|            0|            0|  0.00%|
    31|     78211|      3.25661|  4.16388e-05| 22.89%|    vertices = [rg.Point3d(mesh.Vertices[vertex].X, mesh.Vertices[vertex].Y, mesh.Vertices[vertex].Z)
    32|     11173|     0.182404|  1.63255e-05|  1.28%|                for vertex in (face.A, face.B, face.C, face.D)]
(call)|     11173|      3.22526|  0.000288666| 22.67%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:31 <listcomp>
    33|         0|            0|            0|  0.00%|
    34|     11173|    0.0577319|  5.16709e-06|  0.41%|    if face.IsQuad:
    35|      7628|    0.0313125|  4.10494e-06|  0.22%|        return vertices[:4]
    36|         0|            0|            0|  0.00%|    else:
    37|      3545|    0.0191948|  5.41462e-06|  0.13%|        return vertices[:3]
    38|         0|            0|            0|  0.00%|
    39|         1|            0|            0|  0.00%|def delete_invalid_sensors(mesh, sensors, normals, minimum_angle = 0.017, minimum_area=0.0001):
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|    # face_vertices = [list(mesh.Faces.GetFaceVertices(i)[1:]) for i in range(len(mesh.Faces))]
    42|         0|            0|            0|  0.00%|    # copied_vertices = copy.copy(face_vertices)
    43|         0|            0|            0|  0.00%|
    44|     11174|     0.175319|  1.56899e-05|  1.23%|    for i, (face, normal) in enumerate(zip(mesh.Faces, mesh.FaceNormals)):
    45|     11173|     0.143571|  1.28498e-05|  1.01%|        vertices = get_face_vertices(face, mesh)
(call)|     11173|      3.57677|  0.000320126| 25.14%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:25 get_face_vertices
    46|         0|            0|            0|  0.00%|        # vertices = [rg.Point3d(vertex) for vertex in copied_vertices[i]]
    47|         0|            0|            0|  0.00%|
    48|     11173|    0.0602899|  5.39603e-06|  0.42%|        if face.IsTriangle:
    49|      3545|      0.11358|  3.20395e-05|  0.80%|            triangle = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    50|      3545|    0.0473483|  1.33564e-05|  0.33%|            min_angle = min([triangle.AngleA, triangle.AngleB, triangle.AngleC])
    51|         0|            0|            0|  0.00%|
    52|      3545|    0.0125351|  3.53599e-06|  0.09%|            if min_angle < minimum_angle:
    53|      1035|   0.00598216|  5.77987e-06|  0.04%|                sensors[i] = None
    54|      1035|   0.00199556|  1.92808e-06|  0.01%|                normals[i] = None
    55|      2510|     0.013948|  5.55696e-06|  0.10%|            elif triangle.Area < minimum_area:
    56|       178|            0|            0|  0.00%|                sensors[i] = None
    57|       178|   0.00102854|   5.7783e-06|  0.01%|                normals[i] = None
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|#        elif face.IsQuad:
    60|         0|            0|            0|  0.00%|#            rectangle = rg.Rectangle3d(rg.Plane.WorldXY, vertices[0], vertices[2])
    61|         0|            0|            0|  0.00%|#
    62|         0|            0|            0|  0.00%|#            triangle_1 = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    63|         0|            0|            0|  0.00%|#            triangle_2 = rg.Triangle3d(vertices[2], vertices[3], vertices[0])
    64|         0|            0|            0|  0.00%|#
    65|         0|            0|            0|  0.00%|#            min_angle = min([triangle_1.AngleA, triangle_1.AngleB, triangle_1.AngleC, triangle_2.AngleA, triangle_2.AngleB, triangle_2.AngleC])
    66|         0|            0|            0|  0.00%|#
    67|         0|            0|            0|  0.00%|#            if min_angle < minimum_angle:
    68|         0|            0|            0|  0.00%|#                sensors[i] = None
    69|         0|            0|            0|  0.00%|#                normals[i] = None
    70|         0|            0|            0|  0.00%|#            elif triangle_1.Area < minimum_area or triangle_2.Area < minimum_area:
    71|         0|            0|            0|  0.00%|#                sensors[i] = None
    72|         0|            0|            0|  0.00%|#                normals[i] = None
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|
    75|         1|            0|            0|  0.00%|    return sensors, normals
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|# def compute_centroids(mesh, offset):
    78|         0|            0|            0|  0.00%|#     vectors = [rg.Vector3f.Multiply(mesh.FaceNormals[i], offset) for i in xrange(mesh.Faces.Count)]
    79|         0|            0|            0|  0.00%|#     centroids = [mesh.Faces.GetFaceCenter(i) for i in xrange(mesh.Faces.Count)]
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|#     for centroid, vec in zip(centroids, vectors):
    82|         0|            0|            0|  0.00%|#         centroid.Transform(rg.Transform.Translation(vec))
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|#     return centroids, vectors
    85|         0|            0|            0|  0.00%|
    86|         0|            0|            0|  0.00%|# Make faster with Numpy, using arrays of vectors
    87|         0|            0|            0|  0.00%|def perpendicular_wall_vectors(vector):
    88|         0|            0|            0|  0.00%|    z_vector = rg.Vector3f(0,0,1)
    89|         0|            0|            0|  0.00%|    vec1 = rg.Vector3f.CrossProduct(vector, z_vector)
    90|         0|            0|            0|  0.00%|    vec2 = -vec1
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|    return (vec1, vec2)
    93|         0|            0|            0|  0.00%|
    94|        47|            0|            0|  0.00%|def _to_numpy(points, vectors, offset):
    95|     31779|     0.166137|  5.22788e-06|  1.17%|    np_points = np.array([[point.X, point.Y, point.Z] for point in points])
(call)|        47|      0.14291|   0.00304064|  1.00%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:95 <listcomp>
    96|     31779|     0.266226|  8.37741e-06|  1.87%|    np_vectors = np.array([[vector.X, vector.Y, vector.Z] for vector in vectors]) * offset
(call)|        47|     0.241032|   0.00512834|  1.69%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:96 <listcomp>
    97|         0|            0|            0|  0.00%|
    98|        47|   0.00249815|  5.31521e-05|  0.02%|    new_points = np_points + np_vectors
    99|     31779|     0.785724|  2.47246e-05|  5.52%|    rg_points = [rg.Point3d(*point) for point in new_points]
(call)|        47|     0.785724|    0.0167175|  5.52%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:99 <listcomp>
   100|         0|            0|            0|  0.00%|
   101|        47|  0.000994921|  2.11685e-05|  0.01%|    return rg_points
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|#11.99%
   104|        47|            0|            0|  0.00%|def offset_points(points, vectors, offset):
   105|         0|            0|            0|  0.00%|    # offset_vectors = [rg.Vector3f.Multiply(vec, offset) for vec in vectors]
   106|         0|            0|            0|  0.00%|    # points = [point + offset_vec for point, offset_vec in zip(points, offset_vectors)]
   107|         0|            0|            0|  0.00%|
   108|        47|            0|            0|  0.00%|    points = _to_numpy(points, vectors, offset)
(call)|        47|      1.22158|    0.0259911|  8.59%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:94 _to_numpy
   109|         0|            0|            0|  0.00%|
   110|        47|            0|            0|  0.00%|    return points
   111|         0|            0|            0|  0.00%|
   112|     19136|    0.0657303|   3.4349e-06|  0.46%|def is_above_mesh(point, meshes, ray_vector=rg.Vector3d(0,0,-1)):
   113|     19136|    0.0495639|  2.59009e-06|  0.35%|    intersects = False
   114|     19136|      1.04663|  5.46942e-05|  7.36%|    ray = rg.Ray3d(point, ray_vector)
(call)|     38272|     0.517945|  1.35333e-05|  3.64%|# <string>:4 __init__
   115|         0|            0|            0|  0.00%|
   116|     30218|      0.10863|  3.59489e-06|  0.76%|    for mesh in meshes:
   117|         0|            0|            0|  0.00%|        #11.28%
   118|     19136|     0.531677|  2.77841e-05|  3.74%|        if rg.Intersect.Intersection.MeshRay(mesh, ray) > 0:
   119|      8054|    0.0287814|  3.57356e-06|  0.20%|            intersects = True
   120|      8054|    0.0206904|  2.56896e-06|  0.15%|            break
   121|         0|            0|            0|  0.00%|
   122|     19136|    0.0287464|  1.50221e-06|  0.20%|    return intersects
   123|         0|            0|            0|  0.00%|
   124|      5533|    0.0230412|  4.16433e-06|  0.16%|def roof_ray_intersection(point, roofs, face_height, grid_size, offset):
   125|      5533|     0.165698|  2.99472e-05|  1.16%|    upwards_vector = rg.Vector3d(0,0,1)
   126|      5533|     0.290308|  5.24685e-05|  2.04%|    ray = rg.Ray3d(point, upwards_vector)
(call)|     11066|     0.170667|  1.54227e-05|  1.20%|# <string>:4 __init__
   127|         0|            0|            0|  0.00%|
   128|      5533|    0.0270975|  4.89743e-06|  0.19%|    success = False
   129|     10782|      0.02794|  2.59136e-06|  0.20%|    for roof in roofs:
   130|         0|            0|            0|  0.00%|        # 9.80%
   131|      5533|     0.154305|  2.78881e-05|  1.08%|        distance = rg.Intersect.Intersection.MeshRay(roof, ray)
   132|         0|            0|            0|  0.00%|
   133|      5533|     0.025455|  4.60058e-06|  0.18%|        if 0 < distance < 0.5 * face_height:
   134|       284|    0.0592194|  0.000208519|  0.42%|            point += upwards_vector * distance + rg.Vector3d(0,0,offset)
(call)|      1704|    0.0255728|  1.50075e-05|  0.18%|# <string>:4 __init__
   135|       284|   0.00399065|  1.40516e-05|  0.03%|            success = True
   136|       284|   0.00104094|  3.66527e-06|  0.01%|            break
   137|         0|            0|            0|  0.00%|
   138|      5533|    0.0160124|  2.89399e-06|  0.11%|    return success, point
   139|         0|            0|            0|  0.00%|
   140|      5249|    0.0231161|  4.40391e-06|  0.16%|def wall_ray_intersection(point, normal, walls, grid_size, offset, tolerance=0.1):
   141|      5249|      0.14825|  2.82435e-05|  1.04%|    upwards_vector = rg.Vector3f(0,0,1)
   142|         0|            0|            0|  0.00%|
   143|      5249|      0.16567|  3.15623e-05|  1.16%|    left_vector = rg.Vector3f.CrossProduct(normal, upwards_vector)
   144|      5249|      0.11346|  2.16155e-05|  0.80%|    right_vector = -left_vector
   145|         0|            0|            0|  0.00%|
   146|      5249|     0.699685|  0.000133299|  4.92%|    left_ray = rg.Ray3d(point, rg.Vector3d(left_vector))
(call)|     31494|     0.374625|  1.18951e-05|  2.63%|# <string>:4 __init__
   147|      5249|     0.662681|  0.000126249|  4.66%|    right_ray = rg.Ray3d(point, rg.Vector3d(right_vector))
(call)|     31494|     0.443317|  1.40762e-05|  3.12%|# <string>:4 __init__
   148|         0|            0|            0|  0.00%|
   149|      5249|    0.0186481|   3.5527e-06|  0.13%|    success = False
   150|     10362|    0.0275578|  2.65951e-06|  0.19%|    for wall in walls:
   151|         0|            0|            0|  0.00%|        # 20%
   152|      5249|     0.233945|  4.45695e-05|  1.64%|        left_distance = rg.Intersect.Intersection.MeshRay(wall, left_ray)
   153|      5249|     0.174813|  3.33041e-05|  1.23%|        right_distance = rg.Intersect.Intersection.MeshRay(wall, right_ray)
   154|         0|            0|            0|  0.00%|
   155|      5249|    0.0388422|  7.39992e-06|  0.27%|        if 0 < left_distance < 0.5 * grid_size - tolerance:
   156|        61|            0|            0|  0.00%|            if left_distance < right_distance:
   157|        61|    0.0126197|  0.000206881|  0.09%|                left_vector = rg.Vector3d.Multiply(rg.Vector3d(left_vector), left_distance + offset)
(call)|       488|    0.0100148|  2.05221e-05|  0.07%|# <string>:4 __init__
   158|        61|   0.00395823|  6.48889e-05|  0.03%|                point += left_vector
(call)|       244|   0.00299692|  1.22825e-05|  0.02%|# <string>:4 __init__
   159|        61|            0|            0|  0.00%|                success = True
   160|        61|  0.000962019|  1.57708e-05|  0.01%|                break
   161|         0|            0|            0|  0.00%|
   162|      5188|   0.00998712|  1.92504e-06|  0.07%|        elif 0 < right_distance < 0.5 * grid_size - tolerance:
   163|        75|            0|            0|  0.00%|            if right_distance < left_distance:
   164|        75|    0.0145173|  0.000193564|  0.10%|                right_vector = rg.Vector3d.Multiply(rg.Vector3d(right_vector), right_distance + offset)
(call)|       600|   0.00446558|  7.44263e-06|  0.03%|# <string>:4 __init__
   165|        75|     0.013401|   0.00017868|  0.09%|                point += right_vector
(call)|       300|   0.00199366|  6.64552e-06|  0.01%|# <string>:4 __init__
   166|        75|            0|            0|  0.00%|                success = True
   167|        75|            0|            0|  0.00%|                break
   168|         0|            0|            0|  0.00%|
   169|      5249|    0.0191295|  3.64441e-06|  0.13%|    return success, point
   170|         0|            0|            0|  0.00%|
   171|         1|            0|            0|  0.00%|def compute(ground, roofs, walls, building_heights, grid_size, offset, quad_only=False):
   172|         1|            0|            0|  0.00%|    sensorpoints = []
   173|         1|            0|            0|  0.00%|    normals = []
   174|         0|            0|            0|  0.00%|
   175|         1|     0.024996|     0.024996|  0.18%|    ground_normals = list(ground.FaceNormals)
   176|     11176|     0.273336|  2.44574e-05|  1.92%|    ground_centroids = [ground.Faces.GetFaceCenter(System.Int32(i)) for i in range(ground.Faces.Count)]
(call)|         1|     0.273336|     0.273336|  1.92%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:176 <listcomp>
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|    # 8.73%
   179|         1|            0|            0|  0.00%|    start = time.time()
   180|         1|   0.00555611|   0.00555611|  0.04%|    ground_centroids = offset_points(ground_centroids, ground_normals, offset)
(call)|         1|     0.370442|     0.370442|  2.60%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:104 offset_points
   181|         1|            0|            0|  0.00%|    p1 = time.time() - start
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|    # 10.17%
   184|         1|            0|            0|  0.00%|    start = time.time()
   185|         1|            0|            0|  0.00%|    ground_centroids, ground_normals = delete_invalid_sensors(ground, ground_centroids, ground_normals)
(call)|         1|      4.15237|      4.15237| 29.19%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:39 delete_invalid_sensors
   186|         1|            0|            0|  0.00%|    p2 = time.time() - start
   187|         0|            0|            0|  0.00%|
   188|         1|            0|            0|  0.00%|    joined_roofs = join_meshes(roofs)
(call)|         1|    0.0089817|    0.0089817|  0.06%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:17 join_meshes
   189|         1|   0.00101972|   0.00101972|  0.01%|    roof_normals = joined_roofs.FaceNormals
   190|      6881|     0.254581|  3.69977e-05|  1.79%|    roof_centroids = [joined_roofs.Faces.GetFaceCenter(System.Int32(i)) for i in range(joined_roofs.Faces.Count)]
(call)|         1|     0.254581|     0.254581|  1.79%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:190 <listcomp>
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|    # 6.45%
   193|         1|            0|            0|  0.00%|    start = time.time()
   194|         1|   0.00359297|   0.00359297|  0.03%|    roof_centroids = offset_points(roof_centroids, roof_normals, offset)
(call)|         1|     0.265973|     0.265973|  1.87%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:104 offset_points
   195|         1|            0|            0|  0.00%|    p3 = time.time() - start
   196|         0|            0|            0|  0.00%|
   197|         1|            0|            0|  0.00%|    sensorpoints.extend(ground_centroids)
   198|         1|            0|            0|  0.00%|    normals.extend(ground_normals)
   199|         1|            0|            0|  0.00%|    sensorpoints.extend(roof_centroids)
   200|         1|    0.0125661|    0.0125661|  0.09%|    normals.extend(roof_normals)
   201|         0|            0|            0|  0.00%|
   202|         1|            0|            0|  0.00%|    meshes = [ground] + roofs
   203|         1|            0|            0|  0.00%|    joined_meshes = join_meshes(meshes)
(call)|         1|    0.0155256|    0.0155256|  0.11%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:17 join_meshes
   204|         0|            0|            0|  0.00%|
   205|         1|  0.000998974|  0.000998974|  0.01%|    joined_walls = join_meshes(walls)
(call)|         1|   0.00755167|   0.00755167|  0.05%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:17 join_meshes
   206|         0|            0|            0|  0.00%|
   207|         1|            0|            0|  0.00%|    start = time.time()
   208|        46|            0|            0|  0.00%|    for i, (wall, height) in enumerate(zip(walls, building_heights)):
   209|        45|   0.00199509|  4.43353e-05|  0.01%|        wall.FaceNormals.ComputeFaceNormals()
   210|         0|            0|            0|  0.00%|
   211|        45|            0|            0|  0.00%|        wall_normals = wall.FaceNormals
   212|     13722|     0.318574|  2.32163e-05|  2.24%|        wall_sensors = [wall.Faces.GetFaceCenter(j) for j in range(wall.Faces.Count)]
(call)|        45|     0.312094|   0.00693543|  2.19%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:212 <listcomp>
   213|        45|   0.00205731|  4.57181e-05|  0.01%|        wall_sensors = offset_points(wall_sensors, wall_normals, offset)
(call)|        45|     0.585165|    0.0130037|  4.11%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:104 offset_points
   214|         0|            0|            0|  0.00%|
   215|        45|            0|            0|  0.00%|        face_height = height / int(math.ceil(height / grid_size))
   216|         0|            0|            0|  0.00%|
   217|     13632|     0.180973|  1.32756e-05|  1.27%|        for point, normal in zip(wall_sensors, wall_normals):
   218|         0|            0|            0|  0.00%|            # 15.88%
   219|     13587|     0.179269|  1.31942e-05|  1.26%|            if is_above_mesh(point, [joined_meshes]):
(call)|     13587|      1.75005|  0.000128803| 12.30%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:112 is_above_mesh
   220|      8038|    0.0363691|  4.52464e-06|  0.26%|                sensorpoints.append(point)
   221|      8038|    0.0374711|  4.66174e-06|  0.26%|                normals.append(normal)
   222|         0|            0|            0|  0.00%|            # Check if the sensorpoints are under the corresponding walls' roof (because of splitting error)
   223|      5549|     0.213883|  3.85444e-05|  1.50%|            elif is_above_mesh(point, [meshes[i+1]], ray_vector=rg.Vector3d(0,0,1)):
(call)|      5549|     0.648339|  0.000116839|  4.56%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:112 is_above_mesh
   224|        16|            0|            0|  0.00%|                sensorpoints.append(point)
   225|        16|            0|            0|  0.00%|                normals.append(normal)
   226|         0|            0|            0|  0.00%|            else:
   227|         0|            0|            0|  0.00%|                # Try to move the sensorpoint to close roof + offset
   228|      5533|    0.0714777|  1.29184e-05|  0.50%|                success, point = roof_ray_intersection(point, [joined_roofs], face_height, grid_size, offset)
(call)|      5533|     0.990348|  0.000178989|  6.96%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:124 roof_ray_intersection
   229|         0|            0|            0|  0.00%|
   230|      5533|    0.0445328|  8.04858e-06|  0.31%|                if not success:
   231|         0|            0|            0|  0.00%|                    # Try to move the sensorpoint to close wall + offset
   232|         0|            0|            0|  0.00%|
   233|         0|            0|            0|  0.00%|                    # 30.56%
   234|      5249|    0.0819149|  1.56058e-05|  0.58%|                    success, point = wall_ray_intersection(point, normal, [joined_walls], grid_size, offset)
(call)|      5249|      3.21866|  0.000613194| 22.62%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:140 wall_ray_intersection
   235|         0|            0|            0|  0.00%|
   236|      5249|    0.0246232|  4.69102e-06|  0.17%|                    if not success:
   237|      5113|    0.0256445|  5.01556e-06|  0.18%|                        point = None
   238|      5113|    0.0267942|  5.24041e-06|  0.19%|                        normal = None
   239|         0|            0|            0|  0.00%|
   240|      5533|    0.0297637|  5.37931e-06|  0.21%|                sensorpoints.append(point)
   241|      5533|    0.0332973|  6.01795e-06|  0.23%|                normals.append(normal)
   242|         1|            0|            0|  0.00%|    p4 = time.time() - start
   243|         0|            0|            0|  0.00%|
   244|         1|            0|            0|  0.00%|    start = time.time()
   245|         1|            0|            0|  0.00%|    meshes = [ground] + roofs + walls
   246|         1|            0|            0|  0.00%|    joined_mesh = rg.Mesh()
   247|        92|  0.000997066|  1.08377e-05|  0.01%|    for mesh in meshes:
   248|        91|    0.0286694|  0.000315048|  0.20%|        joined_mesh.Append(mesh)
(call)|       182|   0.00299454|  1.64535e-05|  0.02%|# <string>:4 __init__
   249|         0|            0|            0|  0.00%|
   250|         1|            0|            0|  0.00%|    if quad_only:
   251|         0|            0|            0|  0.00%|        horizontal_mesh = rg.Mesh()
   252|         0|            0|            0|  0.00%|        for mesh in meshes:
   253|         0|            0|            0|  0.00%|            horizontal_mesh.Append(mesh)
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|        new_sensorpoints = []
   256|         0|            0|            0|  0.00%|        new_normals = []
   257|         0|            0|            0|  0.00%|        for face, point, normal in zip(horizontal_mesh.Faces, sensorpoints, normals):
   258|         0|            0|            0|  0.00%|            if not face.IsTriangle:
   259|         0|            0|            0|  0.00%|                new_sensorpoints.append(point)
   260|         0|            0|            0|  0.00%|                new_normals.append(normal)
   261|         0|            0|            0|  0.00%|            else:
   262|         0|            0|            0|  0.00%|                new_sensorpoints.append(None)
   263|         0|            0|            0|  0.00%|                new_normals.append(None)
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|        sensorpoints = new_sensorpoints
   266|         0|            0|            0|  0.00%|        normals = new_normals
   267|         1|            0|            0|  0.00%|    p5 = time.time() - start
   268|         0|            0|            0|  0.00%|
   269|         1|   0.00100088|   0.00100088|  0.01%|    print(p1)
   270|         1|            0|            0|  0.00%|    print(p2)
   271|         1|            0|            0|  0.00%|    print(p3)
   272|         1|            0|            0|  0.00%|    print(p4)
   273|         1|            0|            0|  0.00%|    print(p5)
   274|         0|            0|            0|  0.00%|
   275|         1|            0|            0|  0.00%|    return sensorpoints, normals
   276|         0|            0|            0|  0.00%|
   277|         1|            0|            0|  0.00%|def filter_sensors(sensorpoints, normals):
   278|         1|            0|            0|  0.00%|    filtered_points = []
   279|         1|            0|            0|  0.00%|    filtered_normals = []
   280|         1|            0|            0|  0.00%|    pointmap = []
   281|         0|            0|            0|  0.00%|
   282|     31639|    0.0645952|  2.04163e-06|  0.45%|    for point, normal in zip(sensorpoints, normals):
   283|     31638|    0.0469608|  1.48432e-06|  0.33%|        if point is not None:
   284|     25312|    0.0677857|  2.67801e-06|  0.48%|            filtered_points.append(point)
   285|     25312|    0.0573363|  2.26518e-06|  0.40%|            filtered_normals.append(normal)
   286|     25312|    0.0494983|  1.95553e-06|  0.35%|            pointmap.append(True)
   287|         0|            0|            0|  0.00%|        else:
   288|      6326|   0.00762296|  1.20502e-06|  0.05%|            pointmap.append(False)
   289|         0|            0|            0|  0.00%|
   290|         1|            0|            0|  0.00%|    return filtered_points, filtered_normals, pointmap
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|
File: <string>
File duration: 1.55656s (10.94%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|    116116|     0.299439|  2.57879e-06|  2.10%|
     5|    116116|     0.281486|  2.42418e-06|  1.98%|
     6|    116116|     0.231295|  1.99193e-06|  1.63%|
     7|    116116|     0.245053|  2.11041e-06|  1.72%|
     8|    116116|      0.24855|  2.14053e-06|  1.75%|
     9|    116116|     0.250736|  2.15936e-06|  1.76%|
File: c:/Users/Job de Vogel/OneDrive/Documenten/TU Delft/Master Thesis/Dataset_pipeline/dataset/main.py
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# HERE WE RECEIVE CMD ARGUMENTS
     2|         0|            0|            0|  0.00%|# HERE WE LOAD RHINO INSIDE
     3|         0|            0|            0|  0.00%|# HERE WE RUN ALL SCRIPTS FOR THE DATASET GENERATION
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|import rhinoinside
     6|         0|            0|            0|  0.00%|rhinoinside.load()
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|# import rhino_inside
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|# rhino_inside.load()
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|print('Finished loading rhinoinside...')
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
    15|         0|            0|            0|  0.00%|import System
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|import pickle
    18|         0|            0|            0|  0.00%|import pprofile
    19|         0|            0|            0|  0.00%|import time
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|from load_3dbag import file, outlines, height, meshing, sensors
    22|         0|            0|            0|  0.00%|# from visualize.mesh import show
    23|         0|            0|            0|  0.00%|from transform import points, model
    24|         0|            0|            0|  0.00%|from input_output import save, load
    25|         0|            0|            0|  0.00%|from simulate import run
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|def main():
    28|         0|            0|            0|  0.00%|    _, _, roof_meshes, wall_meshes, _, bbox = file.load("C://Users//Job de Vogel//OneDrive//Documenten//TU Delft//Master Thesis//Dataset_pipeline//3D_BAG_dataset//3dbag_v210908_fd2cee53_lod12_3d_5859.obj")
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|    patch_outlines = outlines.generate_outlines_from_bbox(bbox, 100, 58)
    31|         0|            0|            0|  0.00%|    heights = height.generate(roof_meshes)
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|    idx = 0
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|    patch_outline = patch_outlines[idx]
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|    print('Generating outlines...')
    38|         0|            0|            0|  0.00%|    building_outlines, courtyard_outlines, building_heights, FSI_score, envelope_area, building_area = outlines.generate_building_outlines(patch_outline, wall_meshes, heights)
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|    grid_size = 1.0
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|    print('Meshing walls...')
    43|         0|            0|            0|  0.00%|    walls, wall_outlines = meshing.generate_vertical(building_outlines, courtyard_outlines, building_heights, grid_size)
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|    print('Meshing ground and roofs...')
    46|         0|            0|            0|  0.00%|    '''
    47|         0|            0|            0|  0.00%|    RESOLVE: For some reason outlines are converted to nurbscurves here
    48|         0|            0|            0|  0.00%|    '''
    49|         0|            0|            0|  0.00%|    mesh_plane, roofs = meshing.generate_horizontal(patch_outline, building_outlines, courtyard_outlines, building_heights, grid_size)
    50|         0|            0|            0|  0.00%|    # profiler.dump_stats("C://Users//Job de Vogel//Desktop/stats.txt")
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|    '''
    53|         0|            0|            0|  0.00%|    SENSORS
    54|         0|            0|            0|  0.00%|    '''
    55|         0|            0|            0|  0.00%|    offset = 0.1
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|    profiler = pprofile.Profile()
    58|         0|            0|            0|  0.00%|    with profiler:
    59|         0|            0|            0|  0.00%|        sensorpoints, normals = sensors.compute(mesh_plane, roofs, walls, building_heights, grid_size, offset)
(call)|         1|      13.9324|      13.9324| 97.93%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:171 compute
    60|         0|            0|            0|  0.00%|        filtered_points, filtered_normals, pointmap = sensors.filter_sensors(sensorpoints, normals)
(call)|         1|     0.293799|     0.293799|  2.07%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:277 filter_sensors
    61|         0|            0|            0|  0.00%|    profiler.dump_stats("./stats/stats_4.txt")
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|    array = points.data_to_array(filtered_points, filtered_normals)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|    # save.save_array(array)
    66|         0|            0|            0|  0.00%|    save.save_array_as_list(array)
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|    # array = load.load_array('./data/array.npy')
    69|         0|            0|            0|  0.00%|    # List = load.load_array_as_list('./data/list_data.pkl')
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|    # roof_mesh = sensors.join_meshes(roofs)
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|    # rough_ground_mesh = meshing.remesh_horizontal(mesh_plane)
    74|         0|            0|            0|  0.00%|    # rough_roof_mesh = meshing.remesh_horizontal(roof_mesh)
    75|         0|            0|            0|  0.00%|    # rough_wall_meshes = [meshing.remesh_vertical(outline, height) for outline, height in zip(wall_outlines, building_heights)]
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|    # rough_wall_mesh = sensors.join_meshes(rough_wall_meshes)
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|    # HB_model = model.generate([rough_ground_mesh], [rough_roof_mesh], [rough_wall_mesh], filtered_points, filtered_normals)
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|    # wea = "C:\\Users\\Job de Vogel\\AppData\\Roaming\\ladybug_tools\\weather\\NLD_Amsterdam.062400_IWEC\\NLD_Amsterdam.062400_IWEC.epw"
    82|         0|            0|            0|  0.00%|    # sim_arguments = '-ab 6 -ad 25000 -as 4096 -c 1 -dc 0.75 -dp 512 -dr 3 -ds 0.05 -dt 0.15 -lr 8 -lw 4e-07 -ss 1.0 -st 0.15'
    83|         0|            0|            0|  0.00%|    # results = run.main(HB_model, wea, sim_arguments, pointmap)
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    # print(results)
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    # '''
    88|         0|            0|            0|  0.00%|    # IO
    89|         0|            0|            0|  0.00%|    # '''
    90|         0|            0|            0|  0.00%|    # print('Saving meshes...')
    91|         0|            0|            0|  0.00%|    # mesh_types = ['ground', 'walls', 'roofs']
    92|         0|            0|            0|  0.00%|    # meshes = [mesh_plane, walls, roofs]
    93|         0|            0|            0|  0.00%|    # save.save_mesh_to_json(meshes, mesh_types, 'test_sample', 'C://Users//Job de Vogel//Desktop')
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|    # load.load_mesh_from_json('test_sample', 'C://Users//Job de Vogel//Desktop', mesh_types)
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|    # '''
    98|         0|            0|            0|  0.00%|    # VISUALIZATION
    99|         0|            0|            0|  0.00%|    # '''
   100|         0|            0|            0|  0.00%|    # triangle_meshes = []
   101|         0|            0|            0|  0.00%|    # triangle_meshes.append(meshing.triangulate_quad(mesh_plane))
   102|         0|            0|            0|  0.00%|    # for roof in roofs:
   103|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(roof))
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|    # for wall in walls:
   106|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(wall))
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|    # show(triangle_meshes)
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|if __name__ == '__main__':
   111|         0|            0|            0|  0.00%|    main()
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|    print('finished')
