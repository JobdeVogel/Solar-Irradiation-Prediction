Total duration: 7.92187s
File: c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py
File duration: 6.8657s (86.67%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
     2|         0|            0|            0|  0.00%|import Rhino
     3|         0|            0|            0|  0.00%|import System
     4|         0|            0|            0|  0.00%|import time
     5|         0|            0|            0|  0.00%|import warnings
     6|         0|            0|            0|  0.00%|import sys
     7|         0|            0|            0|  0.00%|import rhino3dm
     8|         0|            0|            0|  0.00%|import pprofile
     9|         0|            0|            0|  0.00%|import math
    10|         0|            0|            0|  0.00%|import numpy as np
    11|         0|            0|            0|  0.00%|import copy
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|'''
    14|         0|            0|            0|  0.00%|Exception line 245 at index 11
    15|         0|            0|            0|  0.00%|'''
    16|         0|            0|            0|  0.00%|
    17|         3|            0|            0|  0.00%|def join_meshes(meshes):
    18|         3|            0|            0|  0.00%|    joined_meshes = rg.Mesh()
    19|       139|            0|            0|  0.00%|    for mesh in meshes:
    20|       136|    0.0186167|  0.000136887|  0.24%|        joined_meshes.Append(mesh)
(call)|       272|   0.00199437|  7.33225e-06|  0.03%|# <string>:4 __init__
    21|         0|            0|            0|  0.00%|
    22|         3|            0|            0|  0.00%|    return joined_meshes
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|#8.94%
    25|      3545|   0.00399351|  1.12652e-06|  0.05%|def get_face_vertices(face, mesh):
    26|         0|            0|            0|  0.00%|    # vertex_0 = rg.Point3d(mesh.Vertices[face.A].X, mesh.Vertices[face.A].Y, mesh.Vertices[face.A].Z)
    27|         0|            0|            0|  0.00%|    # vertex_1 = rg.Point3d(mesh.Vertices[face.B].X, mesh.Vertices[face.B].Y, mesh.Vertices[face.B].Z)
    28|         0|            0|            0|  0.00%|    # vertex_2 = rg.Point3d(mesh.Vertices[face.C].X, mesh.Vertices[face.C].Y, mesh.Vertices[face.C].Z)
    29|         0|            0|            0|  0.00%|    # vertex_3 = rg.Point3d(mesh.Vertices[face.D].X, mesh.Vertices[face.D].Y, mesh.Vertices[face.D].Z)
    30|         0|            0|            0|  0.00%|
    31|     24815|     0.644809|  2.59846e-05|  8.14%|    vertices = [rg.Point3d(mesh.Vertices[vertex].X, mesh.Vertices[vertex].Y, mesh.Vertices[vertex].Z)
    32|      3545|    0.0277143|  7.81784e-06|  0.35%|                for vertex in (face.A, face.B, face.C, face.D)]
(call)|      3545|     0.636825|   0.00017964|  8.04%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:31 <listcomp>
    33|         0|            0|            0|  0.00%|
    34|      3545|    0.0106378|  3.00078e-06|  0.13%|    if face.IsQuad:
    35|         0|            0|            0|  0.00%|        return vertices[:4]
    36|         0|            0|            0|  0.00%|    else:
    37|      3545|   0.00698209|  1.96956e-06|  0.09%|        return vertices[:3]
    38|         0|            0|            0|  0.00%|
    39|         1|            0|            0|  0.00%|def delete_invalid_sensors(mesh, sensors, normals, minimum_angle = 0.017, minimum_area=0.0001):
    40|         0|            0|            0|  0.00%|
    41|     11174|     0.088695|  7.93763e-06|  1.12%|    for i, (face, normal) in enumerate(zip(mesh.Faces, mesh.FaceNormals)):
    42|         0|            0|            0|  0.00%|
    43|     11173|     0.028137|   2.5183e-06|  0.36%|        if face.IsTriangle:
    44|      3545|    0.0280304|  7.90702e-06|  0.35%|            vertices = get_face_vertices(face, mesh)
(call)|      3545|     0.694137|  0.000195807|  8.76%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:25 get_face_vertices
    45|         0|            0|            0|  0.00%|
    46|      3545|    0.0479774|  1.35338e-05|  0.61%|            triangle = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    47|      3545|    0.0274358|  7.73929e-06|  0.35%|            min_angle = min([triangle.AngleA, triangle.AngleB, triangle.AngleC])
    48|         0|            0|            0|  0.00%|
    49|      3545|    0.0179791|  5.07169e-06|  0.23%|            if min_angle < minimum_angle:
    50|      1035|   0.00199533|  1.92785e-06|  0.03%|                sensors[i] = None
    51|      1035|   0.00303626|  2.93359e-06|  0.04%|                normals[i] = None
    52|      2510|    0.0104647|  4.16919e-06|  0.13%|            elif triangle.Area < minimum_area:
    53|       178|            0|            0|  0.00%|                sensors[i] = None
    54|       178|            0|            0|  0.00%|                normals[i] = None
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|#        elif face.IsQuad:
    57|         0|            0|            0|  0.00%|#            rectangle = rg.Rectangle3d(rg.Plane.WorldXY, vertices[0], vertices[2])
    58|         0|            0|            0|  0.00%|#
    59|         0|            0|            0|  0.00%|#            triangle_1 = rg.Triangle3d(vertices[0], vertices[1], vertices[2])
    60|         0|            0|            0|  0.00%|#            triangle_2 = rg.Triangle3d(vertices[2], vertices[3], vertices[0])
    61|         0|            0|            0|  0.00%|#
    62|         0|            0|            0|  0.00%|#            min_angle = min([triangle_1.AngleA, triangle_1.AngleB, triangle_1.AngleC, triangle_2.AngleA, triangle_2.AngleB, triangle_2.AngleC])
    63|         0|            0|            0|  0.00%|#
    64|         0|            0|            0|  0.00%|#            if min_angle < minimum_angle:
    65|         0|            0|            0|  0.00%|#                sensors[i] = None
    66|         0|            0|            0|  0.00%|#                normals[i] = None
    67|         0|            0|            0|  0.00%|#            elif triangle_1.Area < minimum_area or triangle_2.Area < minimum_area:
    68|         0|            0|            0|  0.00%|#                sensors[i] = None
    69|         0|            0|            0|  0.00%|#                normals[i] = None
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|
    72|         1|            0|            0|  0.00%|    return sensors, normals
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|# def compute_centroids(mesh, offset):
    75|         0|            0|            0|  0.00%|#     vectors = [rg.Vector3f.Multiply(mesh.FaceNormals[i], offset) for i in xrange(mesh.Faces.Count)]
    76|         0|            0|            0|  0.00%|#     centroids = [mesh.Faces.GetFaceCenter(i) for i in xrange(mesh.Faces.Count)]
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|#     for centroid, vec in zip(centroids, vectors):
    79|         0|            0|            0|  0.00%|#         centroid.Transform(rg.Transform.Translation(vec))
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|#     return centroids, vectors
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|# Make faster with Numpy, using arrays of vectors
    84|         0|            0|            0|  0.00%|def perpendicular_wall_vectors(vector):
    85|         0|            0|            0|  0.00%|    z_vector = rg.Vector3f(0,0,1)
    86|         0|            0|            0|  0.00%|    vec1 = rg.Vector3f.CrossProduct(vector, z_vector)
    87|         0|            0|            0|  0.00%|    vec2 = -vec1
    88|         0|            0|            0|  0.00%|
    89|         0|            0|            0|  0.00%|    return (vec1, vec2)
    90|         0|            0|            0|  0.00%|
    91|        47|            0|            0|  0.00%|def _to_numpy(points, vectors, offset):
    92|     31779|     0.169994|  5.34927e-06|  2.15%|    np_points = np.array([[point.X, point.Y, point.Z] for point in points])
(call)|        47|     0.149452|   0.00317984|  1.89%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:92 <listcomp>
    93|     31779|     0.187407|   5.8972e-06|  2.37%|    np_vectors = np.array([[vector.X, vector.Y, vector.Z] for vector in vectors]) * offset
(call)|        47|     0.163291|   0.00347428|  2.06%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:93 <listcomp>
    94|         0|            0|            0|  0.00%|
    95|        47|            0|            0|  0.00%|    new_points = np_points + np_vectors
    96|     31779|     0.573436|  1.80445e-05|  7.24%|    rg_points = [rg.Point3d(*point) for point in new_points]
(call)|        47|     0.573436|    0.0122008|  7.24%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:96 <listcomp>
    97|         0|            0|            0|  0.00%|
    98|        47|            0|            0|  0.00%|    return rg_points
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|#11.99%
   101|        47|            0|            0|  0.00%|def offset_points(points, vectors, offset):
   102|         0|            0|            0|  0.00%|    # offset_vectors = [rg.Vector3f.Multiply(vec, offset) for vec in vectors]
   103|         0|            0|            0|  0.00%|    # points = [point + offset_vec for point, offset_vec in zip(points, offset_vectors)]
   104|         0|            0|            0|  0.00%|
   105|        47|   0.00103116|  2.19396e-05|  0.01%|    points = _to_numpy(points, vectors, offset)
(call)|        47|     0.930838|    0.0198051| 11.75%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:91 _to_numpy
   106|         0|            0|            0|  0.00%|
   107|        47|            0|            0|  0.00%|    return points
   108|         0|            0|            0|  0.00%|
   109|     19136|    0.0364316|  1.90382e-06|  0.46%|def is_above_mesh(point, meshes, ray_vector=rg.Vector3d(0,0,-1)):
   110|     19136|    0.0381544|  1.99385e-06|  0.48%|    intersects = False
   111|     19136|     0.733847|   3.8349e-05|  9.26%|    ray = rg.Ray3d(point, ray_vector)
(call)|     38272|      0.33953|   8.8715e-06|  4.29%|# <string>:4 __init__
   112|         0|            0|            0|  0.00%|
   113|     30218|    0.0746887|  2.47166e-06|  0.94%|    for mesh in meshes:
   114|         0|            0|            0|  0.00%|        #11.28%
   115|     19136|     0.369433|  1.93057e-05|  4.66%|        if rg.Intersect.Intersection.MeshRay(mesh, ray) > 0:
   116|      8054|    0.0255997|  3.17851e-06|  0.32%|            intersects = True
   117|      8054|    0.0115318|  1.43181e-06|  0.15%|            break
   118|         0|            0|            0|  0.00%|
   119|     19136|    0.0323811|  1.69215e-06|  0.41%|    return intersects
   120|         0|            0|            0|  0.00%|
   121|      5533|    0.0165069|  2.98336e-06|  0.21%|def roof_ray_intersection(point, roofs, face_height, grid_size, offset):
   122|      5533|     0.118845|  2.14793e-05|  1.50%|    upwards_vector = rg.Vector3d(0,0,1)
   123|      5533|     0.203401|  3.67614e-05|  2.57%|    ray = rg.Ray3d(point, upwards_vector)
(call)|     11066|    0.0887749|  8.02231e-06|  1.12%|# <string>:4 __init__
   124|         0|            0|            0|  0.00%|
   125|      5533|    0.0149605|  2.70387e-06|  0.19%|    success = False
   126|     10782|    0.0266047|  2.46751e-06|  0.34%|    for roof in roofs:
   127|         0|            0|            0|  0.00%|        # 9.80%
   128|      5533|     0.136712|  2.47084e-05|  1.73%|        distance = rg.Intersect.Intersection.MeshRay(roof, ray)
   129|         0|            0|            0|  0.00%|
   130|      5533|    0.0120649|  2.18054e-06|  0.15%|        if 0 < distance < 0.5 * face_height:
   131|       284|    0.0498049|  0.000175369|  0.63%|            point += upwards_vector * distance + rg.Vector3d(0,0,offset)
(call)|      1704|    0.0171986|  1.00931e-05|  0.22%|# <string>:4 __init__
   132|       284|  0.000997543|  3.51248e-06|  0.01%|            success = True
   133|       284|            0|            0|  0.00%|            break
   134|         0|            0|            0|  0.00%|
   135|      5533|     0.007025|  1.26966e-06|  0.09%|    return success, point
   136|         0|            0|            0|  0.00%|
   137|      5249|    0.0125456|  2.39009e-06|  0.16%|def wall_ray_intersection(point, normal, walls, grid_size, offset, tolerance=0.1):
   138|      5249|    0.0577509|  1.10023e-05|  0.73%|    upwards_vector = rg.Vector3f(0,0,1)
   139|         0|            0|            0|  0.00%|
   140|      5249|    0.0818825|  1.55996e-05|  1.03%|    left_vector = rg.Vector3f.CrossProduct(normal, upwards_vector)
   141|      5249|    0.0780003|    1.486e-05|  0.98%|    right_vector = -left_vector
   142|         0|            0|            0|  0.00%|
   143|      5249|     0.500849|  9.54179e-05|  6.32%|    left_ray = rg.Ray3d(point, rg.Vector3d(left_vector))
(call)|     31494|     0.276408|  8.77654e-06|  3.49%|# <string>:4 __init__
   144|      5249|     0.459515|  8.75433e-05|  5.80%|    right_ray = rg.Ray3d(point, rg.Vector3d(right_vector))
(call)|     31494|     0.313746|  9.96209e-06|  3.96%|# <string>:4 __init__
   145|         0|            0|            0|  0.00%|
   146|      5249|    0.0149369|  2.84567e-06|  0.19%|    success = False
   147|     10362|    0.0210471|  2.03118e-06|  0.27%|    for wall in walls:
   148|         0|            0|            0|  0.00%|        # 20%
   149|      5249|     0.148095|  2.82139e-05|  1.87%|        left_distance = rg.Intersect.Intersection.MeshRay(wall, left_ray)
   150|      5249|     0.134421|  2.56089e-05|  1.70%|        right_distance = rg.Intersect.Intersection.MeshRay(wall, right_ray)
   151|         0|            0|            0|  0.00%|
   152|      5249|    0.0189404|  3.60839e-06|  0.24%|        if 0 < left_distance < 0.5 * grid_size - tolerance:
   153|        61|            0|            0|  0.00%|            if left_distance < right_distance:
   154|        61|    0.0130239|  0.000213506|  0.16%|                left_vector = rg.Vector3d.Multiply(rg.Vector3d(left_vector), left_distance + offset)
(call)|       488|   0.00453353|  9.29002e-06|  0.06%|# <string>:4 __init__
   155|        61|   0.00553155|  9.06811e-05|  0.07%|                point += left_vector
(call)|       244|   0.00198746|  8.14532e-06|  0.03%|# <string>:4 __init__
   156|        61|            0|            0|  0.00%|                success = True
   157|        61|            0|            0|  0.00%|                break
   158|         0|            0|            0|  0.00%|
   159|      5188|    0.0125504|  2.41911e-06|  0.16%|        elif 0 < right_distance < 0.5 * grid_size - tolerance:
   160|        75|            0|            0|  0.00%|            if right_distance < left_distance:
   161|        75|    0.0131803|  0.000175737|  0.17%|                right_vector = rg.Vector3d.Multiply(rg.Vector3d(right_vector), right_distance + offset)
(call)|       600|   0.00602031|  1.00338e-05|  0.08%|# <string>:4 __init__
   162|        75|   0.00199676|  2.66234e-05|  0.03%|                point += right_vector
(call)|       300|   0.00202918|  6.76394e-06|  0.03%|# <string>:4 __init__
   163|        75|            0|            0|  0.00%|                success = True
   164|        75|            0|            0|  0.00%|                break
   165|         0|            0|            0|  0.00%|
   166|      5249|    0.0110393|  2.10312e-06|  0.14%|    return success, point
   167|         0|            0|            0|  0.00%|
   168|         1|            0|            0|  0.00%|def compute(ground, roofs, walls, building_heights, grid_size, offset, quad_only=False):
   169|         1|   0.00099802|   0.00099802|  0.01%|    sensorpoints = []
   170|         1|            0|            0|  0.00%|    normals = []
   171|         0|            0|            0|  0.00%|
   172|         1|    0.0180125|    0.0180125|  0.23%|    ground_normals = list(ground.FaceNormals)
   173|     11176|     0.209833|  1.87753e-05|  2.65%|    ground_centroids = [ground.Faces.GetFaceCenter(System.Int32(i)) for i in range(ground.Faces.Count)]
(call)|         1|     0.209833|     0.209833|  2.65%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:173 <listcomp>
   174|         0|            0|            0|  0.00%|
   175|         1|   0.00453711|   0.00453711|  0.06%|    ground_centroids = offset_points(ground_centroids, ground_normals, offset)
(call)|         1|     0.301258|     0.301258|  3.80%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:101 offset_points
   176|         0|            0|            0|  0.00%|
   177|         1|            0|            0|  0.00%|    ground_centroids, ground_normals = delete_invalid_sensors(ground, ground_centroids, ground_normals)
(call)|         1|     0.947888|     0.947888| 11.97%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:39 delete_invalid_sensors
   178|         0|            0|            0|  0.00%|
   179|         1|            0|            0|  0.00%|    joined_roofs = join_meshes(roofs)
(call)|         1|   0.00556183|   0.00556183|  0.07%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:17 join_meshes
   180|         1|            0|            0|  0.00%|    roof_normals = joined_roofs.FaceNormals
   181|      6881|     0.122928|  1.78648e-05|  1.55%|    roof_centroids = [joined_roofs.Faces.GetFaceCenter(System.Int32(i)) for i in range(joined_roofs.Faces.Count)]
(call)|         1|     0.122928|     0.122928|  1.55%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:181 <listcomp>
   182|         0|            0|            0|  0.00%|
   183|         1|   0.00199413|   0.00199413|  0.03%|    roof_centroids = offset_points(roof_centroids, roof_normals, offset)
(call)|         1|     0.237778|     0.237778|  3.00%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:101 offset_points
   184|         0|            0|            0|  0.00%|
   185|         1|            0|            0|  0.00%|    sensorpoints.extend(ground_centroids)
   186|         1|  0.000998497|  0.000998497|  0.01%|    normals.extend(ground_normals)
   187|         1|            0|            0|  0.00%|    sensorpoints.extend(roof_centroids)
   188|         1|    0.0104842|    0.0104842|  0.13%|    normals.extend(roof_normals)
   189|         0|            0|            0|  0.00%|
   190|         1|            0|            0|  0.00%|    meshes = [ground] + roofs
   191|         1|            0|            0|  0.00%|    joined_meshes = join_meshes(meshes)
(call)|         1|   0.00855064|   0.00855064|  0.11%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:17 join_meshes
   192|         0|            0|            0|  0.00%|
   193|         1|            0|            0|  0.00%|    joined_walls = join_meshes(walls)
(call)|         1|   0.00649858|   0.00649858|  0.08%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:17 join_meshes
   194|         0|            0|            0|  0.00%|
   195|        46|            0|            0|  0.00%|    for i, (wall, height) in enumerate(zip(walls, building_heights)):
   196|        45|   0.00107121|  2.38048e-05|  0.01%|        wall.FaceNormals.ComputeFaceNormals()
   197|         0|            0|            0|  0.00%|
   198|        45|            0|            0|  0.00%|        wall_normals = wall.FaceNormals
   199|     13722|     0.224459|  1.63576e-05|  2.83%|        wall_sensors = [wall.Faces.GetFaceCenter(j) for j in range(wall.Faces.Count)]
(call)|        45|     0.222952|    0.0049545|  2.81%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:199 <listcomp>
   200|        45|   0.00701094|  0.000155799|  0.09%|        wall_sensors = offset_points(wall_sensors, wall_normals, offset)
(call)|        45|     0.392833|   0.00872963|  4.96%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:101 offset_points
   201|         0|            0|            0|  0.00%|
   202|        45|  0.000997066|   2.2157e-05|  0.01%|        face_height = height / int(math.ceil(height / grid_size))
   203|         0|            0|            0|  0.00%|
   204|     13632|    0.0894487|  6.56167e-06|  1.13%|        for point, normal in zip(wall_sensors, wall_normals):
   205|         0|            0|            0|  0.00%|            # 15.88%
   206|     13587|    0.0952637|  7.01139e-06|  1.20%|            if is_above_mesh(point, [joined_meshes]):
(call)|     13587|      1.18967|  8.75592e-05| 15.02%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:109 is_above_mesh
   207|      8038|    0.0326786|  4.06551e-06|  0.41%|                sensorpoints.append(point)
   208|      8038|    0.0196598|  2.44585e-06|  0.25%|                normals.append(normal)
   209|         0|            0|            0|  0.00%|            # Check if the sensorpoints are under the corresponding walls' roof (because of splitting error)
   210|      5549|     0.134485|  2.42359e-05|  1.70%|            elif is_above_mesh(point, [meshes[i+1]], ray_vector=rg.Vector3d(0,0,1)):
(call)|      5549|     0.471931|  8.50478e-05|  5.96%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:109 is_above_mesh
   211|        16|            0|            0|  0.00%|                sensorpoints.append(point)
   212|        16|            0|            0|  0.00%|                normals.append(normal)
   213|         0|            0|            0|  0.00%|            else:
   214|         0|            0|            0|  0.00%|                # Try to move the sensorpoint to close roof + offset
   215|      5533|    0.0444558|  8.03466e-06|  0.56%|                success, point = roof_ray_intersection(point, [joined_roofs], face_height, grid_size, offset)
(call)|      5533|     0.692895|   0.00012523|  8.75%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:121 roof_ray_intersection
   216|         0|            0|            0|  0.00%|
   217|      5533|    0.0120447|  2.17688e-06|  0.15%|                if not success:
   218|         0|            0|            0|  0.00%|                    # Try to move the sensorpoint to close wall + offset
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|                    # 30.56%
   221|      5249|    0.0638733|  1.21687e-05|  0.81%|                    success, point = wall_ray_intersection(point, normal, [joined_walls], grid_size, offset)
(call)|      5249|      2.19003|  0.000417228| 27.65%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:137 wall_ray_intersection
   222|         0|            0|            0|  0.00%|
   223|      5249|       0.0144|  2.74338e-06|  0.18%|                    if not success:
   224|      5113|    0.0124946|  2.44369e-06|  0.16%|                        point = None
   225|      5113|    0.0159473|  3.11898e-06|  0.20%|                        normal = None
   226|         0|            0|            0|  0.00%|
   227|      5533|    0.0180683|  3.26555e-06|  0.23%|                sensorpoints.append(point)
   228|      5533|    0.0257244|  4.64927e-06|  0.32%|                normals.append(normal)
   229|         0|            0|            0|  0.00%|
   230|         1|            0|            0|  0.00%|    meshes = [ground] + roofs + walls
   231|         1|            0|            0|  0.00%|    joined_mesh = rg.Mesh()
   232|        92|            0|            0|  0.00%|    for mesh in meshes:
   233|        91|    0.0197217|  0.000216722|  0.25%|        joined_mesh.Append(mesh)
(call)|       182|   0.00294924|  1.62046e-05|  0.04%|# <string>:4 __init__
   234|         0|            0|            0|  0.00%|
   235|         1|            0|            0|  0.00%|    if quad_only:
   236|         0|            0|            0|  0.00%|        horizontal_mesh = rg.Mesh()
   237|         0|            0|            0|  0.00%|        for mesh in meshes:
   238|         0|            0|            0|  0.00%|            horizontal_mesh.Append(mesh)
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|        new_sensorpoints = []
   241|         0|            0|            0|  0.00%|        new_normals = []
   242|         0|            0|            0|  0.00%|        for face, point, normal in zip(horizontal_mesh.Faces, sensorpoints, normals):
   243|         0|            0|            0|  0.00%|            if not face.IsTriangle:
   244|         0|            0|            0|  0.00%|                new_sensorpoints.append(point)
   245|         0|            0|            0|  0.00%|                new_normals.append(normal)
   246|         0|            0|            0|  0.00%|            else:
   247|         0|            0|            0|  0.00%|                new_sensorpoints.append(None)
   248|         0|            0|            0|  0.00%|                new_normals.append(None)
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|        sensorpoints = new_sensorpoints
   251|         0|            0|            0|  0.00%|        normals = new_normals
   252|         0|            0|            0|  0.00%|
   253|         1|            0|            0|  0.00%|    return sensorpoints, normals
   254|         0|            0|            0|  0.00%|
   255|         1|            0|            0|  0.00%|def filter_sensors(sensorpoints, normals):
   256|         1|            0|            0|  0.00%|    filtered_points = []
   257|         1|            0|            0|  0.00%|    filtered_normals = []
   258|         1|            0|            0|  0.00%|    pointmap = []
   259|         0|            0|            0|  0.00%|
   260|     31639|    0.0618494|  1.95485e-06|  0.78%|    for point, normal in zip(sensorpoints, normals):
   261|     31638|    0.0564015|  1.78271e-06|  0.71%|        if point is not None:
   262|     25312|     0.054657|  2.15933e-06|  0.69%|            filtered_points.append(point)
   263|     25312|    0.0471272|  1.86185e-06|  0.59%|            filtered_normals.append(normal)
   264|     25312|    0.0394809|  1.55977e-06|  0.50%|            pointmap.append(True)
   265|         0|            0|            0|  0.00%|        else:
   266|      6326|    0.0119233|  1.88481e-06|  0.15%|            pointmap.append(False)
   267|         0|            0|            0|  0.00%|
   268|         1|            0|            0|  0.00%|    return filtered_points, filtered_normals, pointmap
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|
File: <string>
File duration: 1.05517s (13.32%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|    116116|     0.201753|  1.73752e-06|  2.55%|
     5|    116116|     0.186139|  1.60304e-06|  2.35%|
     6|    116116|     0.172562|  1.48612e-06|  2.18%|
     7|    116116|     0.174239|  1.50056e-06|  2.20%|
     8|    116116|     0.144041|  1.24049e-06|  1.82%|
     9|    116116|     0.176437|  1.51949e-06|  2.23%|
File: c:/Users/Job de Vogel/OneDrive/Documenten/TU Delft/Master Thesis/Dataset_pipeline/dataset/main.py
File duration: 0s (0.00%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# HERE WE RECEIVE CMD ARGUMENTS
     2|         0|            0|            0|  0.00%|# HERE WE LOAD RHINO INSIDE
     3|         0|            0|            0|  0.00%|# HERE WE RUN ALL SCRIPTS FOR THE DATASET GENERATION
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|import rhinoinside
     6|         0|            0|            0|  0.00%|rhinoinside.load()
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|# import rhino_inside
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|# rhino_inside.load()
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|print('Finished loading rhinoinside...')
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|import Rhino.Geometry as rg
    15|         0|            0|            0|  0.00%|import System
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|import pickle
    18|         0|            0|            0|  0.00%|import pprofile
    19|         0|            0|            0|  0.00%|import time
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|from load_3dbag import file, outlines, height, meshing, sensors
    22|         0|            0|            0|  0.00%|# from visualize.mesh import show
    23|         0|            0|            0|  0.00%|from transform import points, model
    24|         0|            0|            0|  0.00%|from input_output import save, load
    25|         0|            0|            0|  0.00%|from simulate import run
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|import sys
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|def main():
    30|         0|            0|            0|  0.00%|    _, _, roof_meshes, wall_meshes, _, bbox = file.load("C://Users//Job de Vogel//OneDrive//Documenten//TU Delft//Master Thesis//Dataset_pipeline//3D_BAG_dataset//3dbag_v210908_fd2cee53_lod12_3d_5859.obj")
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|    patch_outlines = outlines.generate_outlines_from_bbox(bbox, 100, 58)
    33|         0|            0|            0|  0.00%|    heights = height.generate(roof_meshes)
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|    idx = 0
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|    patch_outline = patch_outlines[idx]
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|    print('Generating outlines...')
    40|         0|            0|            0|  0.00%|    building_outlines, courtyard_outlines, building_heights, FSI_score, envelope_area, building_area = outlines.generate_building_outlines(patch_outline, wall_meshes, heights)
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|    grid_size = 1.0
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|    print('Meshing walls...')
    45|         0|            0|            0|  0.00%|    walls, wall_outlines = meshing.generate_vertical(building_outlines, courtyard_outlines, building_heights, grid_size)
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|    print('Meshing ground and roofs...')
    48|         0|            0|            0|  0.00%|    '''
    49|         0|            0|            0|  0.00%|    RESOLVE: For some reason outlines are converted to nurbscurves here
    50|         0|            0|            0|  0.00%|    '''
    51|         0|            0|            0|  0.00%|    mesh_plane, roofs = meshing.generate_horizontal(patch_outline, building_outlines, courtyard_outlines, building_heights, grid_size)
    52|         0|            0|            0|  0.00%|    # profiler.dump_stats("C://Users//Job de Vogel//Desktop/stats.txt")
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|    '''
    55|         0|            0|            0|  0.00%|    SENSORS
    56|         0|            0|            0|  0.00%|    '''
    57|         0|            0|            0|  0.00%|    offset = 0.1
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|    profiler = pprofile.Profile()
    60|         0|            0|            0|  0.00%|    with profiler:
    61|         0|            0|            0|  0.00%|        sensorpoints, normals = sensors.compute(mesh_plane, roofs, walls, building_heights, grid_size, offset)
(call)|         1|      7.64943|      7.64943| 96.56%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:168 compute
    62|         0|            0|            0|  0.00%|        filtered_points, filtered_normals, pointmap = sensors.filter_sensors(sensorpoints, normals)
(call)|         1|     0.271439|     0.271439|  3.43%|# c:\Users\Job de Vogel\OneDrive\Documenten\TU Delft\Master Thesis\Dataset_pipeline\dataset\load_3dbag\sensors.py:255 filter_sensors
    63|         0|            0|            0|  0.00%|    profiler.dump_stats("./stats/stats_6.txt")
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|    array = points.data_to_array(filtered_points, filtered_normals)
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|    # save.save_array(array)
    68|         0|            0|            0|  0.00%|    save.save_array_as_list(array)
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|    array = load.load_array('./data/array.npy')
    71|         0|            0|            0|  0.00%|    List = load.load_array_as_list('./data/list_data.pkl')
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|    roof_mesh = sensors.join_meshes(roofs)
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|    rough_ground_mesh = meshing.remesh_horizontal(mesh_plane)
    76|         0|            0|            0|  0.00%|    rough_roof_mesh = meshing.remesh_horizontal(roof_mesh)
    77|         0|            0|            0|  0.00%|    rough_wall_meshes = [meshing.remesh_vertical(outline, height) for outline, height in zip(wall_outlines, building_heights)]
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|    rough_wall_mesh = sensors.join_meshes(rough_wall_meshes)
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|    HB_model = model.generate([rough_ground_mesh], [rough_roof_mesh], [rough_wall_mesh], filtered_points, filtered_normals)
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|    wea = "C:\\Users\\Job de Vogel\\AppData\\Roaming\\ladybug_tools\\weather\\NLD_Amsterdam.062400_IWEC\\NLD_Amsterdam.062400_IWEC.epw"
    84|         0|            0|            0|  0.00%|    sim_arguments = '-ab 6 -ad 25000 -as 4096 -c 1 -dc 0.75 -dp 512 -dr 3 -ds 0.05 -dt 0.15 -lr 8 -lw 4e-07 -ss 1.0 -st 0.15'
    85|         0|            0|            0|  0.00%|    results = run.main(HB_model, wea, sim_arguments, pointmap)
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    # print(results)
    88|         0|            0|            0|  0.00%|
    89|         0|            0|            0|  0.00%|    # '''
    90|         0|            0|            0|  0.00%|    # IO
    91|         0|            0|            0|  0.00%|    # '''
    92|         0|            0|            0|  0.00%|    print('Saving meshes...')
    93|         0|            0|            0|  0.00%|    mesh_types = ['ground', 'walls', 'roofs']
    94|         0|            0|            0|  0.00%|    meshes = [mesh_plane, walls, roofs]
    95|         0|            0|            0|  0.00%|    save.save_mesh_to_json(meshes, mesh_types, 'test_sample', 'C://Users//Job de Vogel//Desktop')
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|    load.load_mesh_from_json('test_sample', 'C://Users//Job de Vogel//Desktop', mesh_types)
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|    # '''
   100|         0|            0|            0|  0.00%|    # VISUALIZATION
   101|         0|            0|            0|  0.00%|    # '''
   102|         0|            0|            0|  0.00%|    # triangle_meshes = []
   103|         0|            0|            0|  0.00%|    # triangle_meshes.append(meshing.triangulate_quad(mesh_plane))
   104|         0|            0|            0|  0.00%|    # for roof in roofs:
   105|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(roof))
   106|         0|            0|            0|  0.00%|
   107|         0|            0|            0|  0.00%|    # for wall in walls:
   108|         0|            0|            0|  0.00%|    #     triangle_meshes.append(meshing.triangulate_quad(wall))
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|    # show(triangle_meshes)
   111|         0|            0|            0|  0.00%|
   112|         0|            0|            0|  0.00%|if __name__ == '__main__':
   113|         0|            0|            0|  0.00%|    start = time.time()
   114|         0|            0|            0|  0.00%|    main()
   115|         0|            0|            0|  0.00%|    end = time.time()
   116|         0|            0|            0|  0.00%|    print(end-start)
